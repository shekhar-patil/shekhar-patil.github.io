"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[6340],{7943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"data-structures-and-algorithms/sorting-algorithms/bubble-sort","title":"Bubble Sort","description":"Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process continues until the array is sorted.","source":"@site/docs/data-structures-and-algorithms/sorting-algorithms/bubble-sort.md","sourceDirName":"data-structures-and-algorithms/sorting-algorithms","slug":"/data-structures-and-algorithms/sorting-algorithms/bubble-sort","permalink":"/docs/data-structures-and-algorithms/sorting-algorithms/bubble-sort","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"dsaSidebar","previous":{"title":"Sorting Algorithms","permalink":"/docs/category/sorting-algorithms"},"next":{"title":"Insertion Sort","permalink":"/docs/data-structures-and-algorithms/sorting-algorithms/insertion-sort"}}');var r=n(4848),i=n(8453);const o={sidebar_position:1},a="Bubble Sort",l={},d=[{value:"\ud83e\udde0 Algorithm (Go Implementation)",id:"-algorithm-go-implementation",level:2},{value:"\ud83d\udcc8 Time and Space Complexity",id:"-time-and-space-complexity",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"bubble-sort",children:"Bubble Sort"})}),"\n",(0,r.jsx)(t.p,{children:"Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process continues until the array is sorted."}),"\n",(0,r.jsx)(t.p,{children:"Though not suitable for large datasets due to its quadratic time complexity, Bubble Sort is useful for educational purposes and for understanding the basics of sorting algorithms."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-algorithm-go-implementation",children:"\ud83e\udde0 Algorithm (Go Implementation)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n "fmt"\n)\n\nfunc BubbleSort(nums []int) {\n    n := len(nums)\n\n    for i := 0; i < n; i++ {\n        swapped := false\n        for j := 0; j < n-i-1; j++ {\n            if nums[j] > nums[j+1] {\n                swapped = true\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n            }\n        }\n\n        if !swapped {\n            break\n        }\n    }\n\n    fmt.Println(nums)\n}\n\nfunc main() {\n    nums := []int{10, 2, 5, 3, 1}\n    BubbleSort(nums)\n}\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-time-and-space-complexity",children:"\ud83d\udcc8 Time and Space Complexity"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Case"}),(0,r.jsx)(t.th,{children:"Time Complexity"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Best Case"}),(0,r.jsx)(t.td,{children:"O(n)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Average Case"}),(0,r.jsx)(t.td,{children:"O(n\xb2)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Worst Case"}),(0,r.jsx)(t.td,{children:"O(n\xb2)"})]})]})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Best case"})," occurs when the array is already sorted (optimized by ",(0,r.jsx)(t.code,{children:"swapped"})," flag)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Worst case"})," occurs when the array is sorted in reverse."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Space Complexity"}),": O(1) \u2013 in-place sorting."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.p,{children:["Feel free to follow my work on GitHub: ",(0,r.jsx)(t.a,{href:"https://github.com/shekhar-patil/data_structure_and_algorithms/blob/main/sorting_algorithms/bubble_sort.go",children:"Bubble Sort in Go"})]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);