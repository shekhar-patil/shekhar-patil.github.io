"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[2013],{5546:e=>{e.exports=JSON.parse('{"permalink":"/blog/scan-pdf-files-with-pdfscanner-gem","source":"@site/blog/2025-05-20-pdf-scanner-gem.md","title":"Introducing My New Ruby Gem - PDFScanner","description":"PDF files can contain much more than text and images \u2014 they may include JavaScript, embedded files, form inputs, or even malicious payloads. If your application processes user-uploaded PDFs, it\'s essential to scan them for such potential security threats.","date":"2025-05-20T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/blog/tags/ruby","description":"A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write."},{"inline":false,"label":"PDF","permalink":"/blog/tags/blog/tags/pdf"},{"inline":false,"label":"Security","permalink":"/blog/tags/blog/tags/security"},{"inline":false,"label":"Gem","permalink":"/blog/tags/blog/tags/gem"}],"readingTime":2.04,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"scan-pdf-files-with-pdfscanner-gem","title":"Introducing My New Ruby Gem - PDFScanner","authors":"shekhar-patil","tags":["ruby","pdf","security","gem"]},"unlisted":false,"prevItem":{"title":"How to Terminate Goroutines in Go","permalink":"/blog/terminate-goroutines"},"nextItem":{"title":"Failing Google\u2019s Final Round\u200a\u2014\u200aWhat I Learned","permalink":"/blog/google-interview"}}')},6276:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});var i=s(5546),t=s(4848),r=s(8453);const a={slug:"scan-pdf-files-with-pdfscanner-gem",title:"Introducing My New Ruby Gem - PDFScanner",authors:"shekhar-patil",tags:["ruby","pdf","security","gem"]},l="Introduction",c={authorsImageUrls:[void 0]},o=[{value:"Why scan PDFs?",id:"why-scan-pdfs",level:2},{value:"Installation",id:"installation",level:2},{value:"How to Use <code>pdf_scanner</code>",id:"how-to-use-pdf_scanner",level:2},{value:"Parameters",id:"parameters",level:3},{value:"What does the scan return?",id:"what-does-the-scan-return",level:2},{value:"Configuring Security Policies",id:"configuring-security-policies",level:2},{value:"When should you use <code>pdf_scanner</code>?",id:"when-should-you-use-pdf_scanner",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"PDF files can contain much more than text and images \u2014 they may include JavaScript, embedded files, form inputs, or even malicious payloads. If your application processes user-uploaded PDFs, it's essential to scan them for such potential security threats."}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"pdf_scanner"})," Ruby gem offers an easy-to-use and customizable way to scan PDF files against configurable security policies. It even supports encrypted PDFs and can quarantine any file that violates your policies."]}),"\n",(0,t.jsx)(n.h2,{id:"why-scan-pdfs",children:"Why scan PDFs?"}),"\n",(0,t.jsx)(n.p,{children:"PDFs are a commonly used format for sharing information. However, attackers often exploit advanced PDF features to inject hidden scripts or deliver malware."}),"\n",(0,t.jsx)(n.p,{children:"By scanning your PDFs before uploading, processing, or distributing them, you significantly reduce the surface area for security breaches."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["Add the gem to your ",(0,t.jsx)(n.code,{children:"Gemfile"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"gem 'pdf_scanner'\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or install it directly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gem install pdf_scanner\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"how-to-use-pdf_scanner",children:["How to Use ",(0,t.jsx)(n.code,{children:"pdf_scanner"})]}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a basic example of how to scan a PDF file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'pdf_scanner'\n\nscanner = PdfScanner::Scanner.new\nresult = scanner.scan(\n  target_file: 'files/sample.pdf',     # Required\n  config_file: 'config/policy.yml',    # Optional\n  policy: 'strict',                    # Optional\n  dir: 'quarantine',                   # Optional\n  passwd: 'secret'                     # Optional for encrypted PDFs\n)\n\nputs result\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"target_file"}),(0,t.jsxs)(n.td,{children:["Path to the PDF file you want to scan (",(0,t.jsx)(n.strong,{children:"required"}),")."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"config_file"}),(0,t.jsxs)(n.td,{children:["YAML file with security policies (",(0,t.jsx)(n.strong,{children:"optional"}),")."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"policy"}),(0,t.jsxs)(n.td,{children:["Policy name to enforce (",(0,t.jsx)(n.strong,{children:"optional"}),", defaults to ",(0,t.jsx)(n.code,{children:"standard"}),")."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"dir"}),(0,t.jsxs)(n.td,{children:["Directory to move/quarantine flagged files (",(0,t.jsx)(n.strong,{children:"optional"}),")."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"passwd"}),(0,t.jsxs)(n.td,{children:["Password for encrypted PDFs (",(0,t.jsx)(n.strong,{children:"optional"}),")."]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"what-does-the-scan-return",children:"What does the scan return?"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"scan"})," method returns a hash with two keys:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"{\n  rejected_policies: ['EmbeddedFile', 'JavaScript'],\n  analysis_failure: []\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rejected_policies"}),": List of policies violated by the scanned PDF."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"analysis_failure"}),": Any errors encountered during the scan."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuring-security-policies",children:"Configuring Security Policies"}),"\n",(0,t.jsx)(n.p,{children:"Security policies are defined in a YAML configuration file. Here\u2019s an example policy:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"standard:\n  allow:\n    - Text\n    - Image\n  deny:\n    - JavaScript\n    - EmbeddedFile\n    - LaunchAction\n    - ExternalStream\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can customize these rules to fit the specific needs of your application."}),"\n",(0,t.jsxs)(n.h2,{id:"when-should-you-use-pdf_scanner",children:["When should you use ",(0,t.jsx)(n.code,{children:"pdf_scanner"}),"?"]}),"\n",(0,t.jsx)(n.p,{children:"You can use the gem in many practical scenarios, such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Validating user-uploaded PDFs on web forms"}),"\n",(0,t.jsx)(n.li,{children:"Automating document checks before emailing or sharing"}),"\n",(0,t.jsx)(n.li,{children:"As part of a secure document ingestion pipeline"}),"\n",(0,t.jsx)(n.li,{children:"Complying with data handling and security standards"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"pdf_scanner"})," gem is a lightweight yet powerful tool for securing your PDF processing workflows in Ruby. With support for customizable policies and encrypted PDFs, it\u2019s a must-have for any Ruby developer handling file uploads."]}),"\n",(0,t.jsxs)(n.p,{children:["You can find the gem on ",(0,t.jsx)(n.a,{href:"https://rubygems.org/gems/pdf_scanner",children:"RubyGems"})," or browse the source code on ",(0,t.jsx)(n.a,{href:"https://github.com/shekhar-patil/pdf_scanner",children:"GitHub"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);