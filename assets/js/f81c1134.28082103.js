"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"terminate-goroutines","metadata":{"permalink":"/blog/terminate-goroutines","source":"@site/blog/2025-05-30-terminate-goroutine/index.md","title":"How to Terminate Goroutines in Go","description":"This week, I explored goroutines in more depth, particularly focusing on how to terminate them gracefully.","date":"2025-05-30T00:00:00.000Z","tags":[{"inline":false,"label":"Golang","permalink":"/blog/tags/golang","description":"Go is a statically typed, compiled high-level programming language designed at Google..."},{"inline":true,"label":"Design Pattern","permalink":"/blog/tags/design-pattern"},{"inline":true,"label":"Concurrency","permalink":"/blog/tags/concurrency"}],"readingTime":2.26,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"terminate-goroutines","title":"How to Terminate Goroutines in Go","authors":"shekhar-patil","tags":["golang","Design Pattern","Concurrency"]},"unlisted":false,"nextItem":{"title":"Introducing My New Ruby Gem - PDFScanner","permalink":"/blog/scan-pdf-files-with-pdfscanner-gem"}},"content":"This week, I explored goroutines in more depth, particularly focusing on how to terminate them gracefully.\\n\\n### How to Terminate Goroutines in Go?\\n\\nIn Go, goroutines cannot be forcefully killed. Instead, they should be terminated **gracefully and in a controlled manner**.\\n\x3c!--truncate--\x3e\\nYou can achieve this using mechanisms such as **channels**, **context**, or a **shared flag**. Among these, using `context` is the most recommended and idiomatic way.\\n\\n---\\n\\n### Method 1: Using `context.Context`\\n\\nUse `context.WithCancel` when you want to manually signal cancellation. When `cancel()` is called, all goroutines observing that context will receive a signal via `<-ctx.Done()`.\\n\\n```go\\npackage main\\n\\nimport (\\n    \\"context\\"\\n    \\"fmt\\"\\n    \\"sync\\"\\n    \\"time\\"\\n)\\n\\nfunc worker(ctx context.Context, wg *sync.WaitGroup) {\\n    defer wg.Done()\\n\\n    for {\\n        select {\\n        case <-ctx.Done():\\n            fmt.Println(\\"Worker cancelled:\\", ctx.Err())\\n            return\\n        default:\\n            fmt.Println(\\"Working...\\")\\n            time.Sleep(500 * time.Millisecond)\\n        }\\n    }\\n}\\n\\nfunc main() {\\n    ctx, cancel := context.WithCancel(context.Background())\\n    var wg sync.WaitGroup\\n\\n    wg.Add(1)\\n    go worker(ctx, &wg)\\n\\n    time.Sleep(2 * time.Second)\\n    cancel()\\n    wg.Wait()\\n\\n    fmt.Println(\\"All workers done\\")\\n}\\n````\\n\\n---\\n\\nYou can also use other context-based methods:\\n\\n#### `context.WithTimeout(parent Context, timeout time.Duration)`\\n\\nThis automatically cancels the context after the specified duration.\\n\\n```go\\nctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\\ndefer cancel()\\n\\ngo func(ctx context.Context) {\\n    <-ctx.Done()\\n    fmt.Println(\\"Timed out:\\", ctx.Err()) // Prints after 2 seconds\\n}(ctx)\\n```\\n\\n#### `context.WithDeadline(parent Context, deadline time.Time)`\\n\\nThis cancels the context at a specific time. It\'s similar to `WithTimeout`, but instead of a duration, you provide an exact deadline.\\n\\n```go\\ndeadline := time.Now().Add(3 * time.Second)\\nctx, cancel := context.WithDeadline(context.Background(), deadline)\\ndefer cancel()\\n\\ngo func(ctx context.Context) {\\n    <-ctx.Done()\\n    fmt.Println(\\"Deadline reached:\\", ctx.Err())\\n}(ctx)\\n```\\n\\n---\\n\\n### Method 2: Using Channels to Signal Termination\\n\\nThis is another clean and idiomatic approach in Go.\\n\\n```go\\npackage main\\n\\nimport (\\n    \\"fmt\\"\\n    \\"sync\\"\\n    \\"time\\"\\n)\\n\\nfunc worker(ch chan bool, wg *sync.WaitGroup) {\\n    defer wg.Done()\\n\\n    for {\\n        select {\\n        case <-ch:\\n            fmt.Println(\\"Worker cancelled\\")\\n            return\\n        default:\\n            fmt.Println(\\"Working...\\")\\n            time.Sleep(500 * time.Millisecond)\\n        }\\n    }\\n}\\n\\nfunc main() {\\n    ch := make(chan bool)\\n    var wg sync.WaitGroup\\n\\n    wg.Add(1)\\n    go worker(ch, &wg)\\n\\n    time.Sleep(2 * time.Second)\\n    ch <- true\\n\\n    wg.Wait()\\n}\\n```\\n\\n---\\n\\n### Method 3: Using a Shared Variable (Not Recommended)\\n\\nWhile possible, this method is generally discouraged unless necessary, as it can be prone to race conditions if not handled properly.\\n\\n```go\\npackage main\\n\\nimport (\\n    \\"fmt\\"\\n    \\"sync\\"\\n    \\"sync/atomic\\"\\n    \\"time\\"\\n)\\n\\nfunc worker(stop *int32, wg *sync.WaitGroup) {\\n    defer wg.Done()\\n\\n    for {\\n        if atomic.LoadInt32(stop) == 1 {\\n            fmt.Println(\\"Worker cancelled.\\")\\n            return\\n        }\\n        fmt.Println(\\"Working...\\")\\n        time.Sleep(500 * time.Millisecond)\\n    }\\n}\\n\\nfunc main() {\\n    var stop int32\\n    var wg sync.WaitGroup\\n\\n    wg.Add(1)\\n    go worker(&stop, &wg)\\n\\n    time.Sleep(2 * time.Second)\\n    atomic.StoreInt32(&stop, 1)\\n\\n    wg.Wait()\\n    fmt.Println(\\"All workers done\\")\\n}\\n```\\n\\n---\\n\\n### Conclusion\\n\\nGraceful termination of goroutines is a fundamental part of writing robust concurrent code in Go. Use:\\n\\n* `context` for structured and scalable cancellation\\n* `channels` for simple signaling\\n* shared flags with caution and proper synchronization\\n\\nEach method has its own use case, but **context-based cancellation is the most idiomatic and scalable** approach in modern Go applications."},{"id":"scan-pdf-files-with-pdfscanner-gem","metadata":{"permalink":"/blog/scan-pdf-files-with-pdfscanner-gem","source":"@site/blog/2025-05-20-pdf-scanner-gem.md","title":"Introducing My New Ruby Gem - PDFScanner","description":"PDF files can contain much more than text and images \u2014 they may include JavaScript, embedded files, form inputs, or even malicious payloads. If your application processes user-uploaded PDFs, it\'s essential to scan them for such potential security threats.","date":"2025-05-20T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/blog/tags/ruby","description":"A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write."},{"inline":false,"label":"PDF","permalink":"/blog/tags/blog/tags/pdf"},{"inline":false,"label":"Security","permalink":"/blog/tags/blog/tags/security"},{"inline":false,"label":"Gem","permalink":"/blog/tags/blog/tags/gem"}],"readingTime":2.04,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"scan-pdf-files-with-pdfscanner-gem","title":"Introducing My New Ruby Gem - PDFScanner","authors":"shekhar-patil","tags":["ruby","pdf","security","gem"]},"unlisted":false,"prevItem":{"title":"How to Terminate Goroutines in Go","permalink":"/blog/terminate-goroutines"},"nextItem":{"title":"Failing Google\u2019s Final Round\u200a\u2014\u200aWhat I Learned","permalink":"/blog/google-interview"}},"content":"PDF files can contain much more than text and images \u2014 they may include JavaScript, embedded files, form inputs, or even malicious payloads. If your application processes user-uploaded PDFs, it\'s essential to scan them for such potential security threats.\\n\\nThe `pdf_scanner` Ruby gem offers an easy-to-use and customizable way to scan PDF files against configurable security policies. It even supports encrypted PDFs and can quarantine any file that violates your policies.\\n\\n\x3c!--truncate--\x3e\\n\\n## Why scan PDFs?\\n\\nPDFs are a commonly used format for sharing information. However, attackers often exploit advanced PDF features to inject hidden scripts or deliver malware.\\n\\nBy scanning your PDFs before uploading, processing, or distributing them, you significantly reduce the surface area for security breaches.\\n\\n## Installation\\n\\nAdd the gem to your `Gemfile`:\\n\\n```ruby\\ngem \'pdf_scanner\'\\n```\\n\\nOr install it directly:\\n\\n```bash\\ngem install pdf_scanner\\n```\\n\\n## How to Use `pdf_scanner`\\n\\nHere\u2019s a basic example of how to scan a PDF file:\\n\\n```ruby\\nrequire \'pdf_scanner\'\\n\\nscanner = PdfScanner::Scanner.new\\nresult = scanner.scan(\\n  target_file: \'files/sample.pdf\',     # Required\\n  config_file: \'config/policy.yml\',    # Optional\\n  policy: \'strict\',                    # Optional\\n  dir: \'quarantine\',                   # Optional\\n  passwd: \'secret\'                     # Optional for encrypted PDFs\\n)\\n\\nputs result\\n```\\n\\n### Parameters\\n\\n| Parameter    | Description                                                    |\\n| ------------ | -------------------------------------------------------------- |\\n| target\\\\_file | Path to the PDF file you want to scan (**required**).          |\\n| config\\\\_file | YAML file with security policies (**optional**).               |\\n| policy       | Policy name to enforce (**optional**, defaults to `standard`). |\\n| dir          | Directory to move/quarantine flagged files (**optional**).     |\\n| passwd       | Password for encrypted PDFs (**optional**).                    |\\n\\n## What does the scan return?\\n\\nThe `scan` method returns a hash with two keys:\\n\\n```ruby\\n{\\n  rejected_policies: [\'EmbeddedFile\', \'JavaScript\'],\\n  analysis_failure: []\\n}\\n```\\n\\n* `rejected_policies`: List of policies violated by the scanned PDF.\\n* `analysis_failure`: Any errors encountered during the scan.\\n\\n## Configuring Security Policies\\n\\nSecurity policies are defined in a YAML configuration file. Here\u2019s an example policy:\\n\\n```yaml\\nstandard:\\n  allow:\\n    - Text\\n    - Image\\n  deny:\\n    - JavaScript\\n    - EmbeddedFile\\n    - LaunchAction\\n    - ExternalStream\\n```\\n\\nYou can customize these rules to fit the specific needs of your application.\\n\\n## When should you use `pdf_scanner`?\\n\\nYou can use the gem in many practical scenarios, such as:\\n\\n* Validating user-uploaded PDFs on web forms\\n* Automating document checks before emailing or sharing\\n* As part of a secure document ingestion pipeline\\n* Complying with data handling and security standards\\n\\n## Conclusion\\n\\nThe `pdf_scanner` gem is a lightweight yet powerful tool for securing your PDF processing workflows in Ruby. With support for customizable policies and encrypted PDFs, it\u2019s a must-have for any Ruby developer handling file uploads.\\n\\nYou can find the gem on [RubyGems](https://rubygems.org/gems/pdf_scanner) or browse the source code on [GitHub](https://github.com/shekhar-patil/pdf_scanner)."},{"id":"google-interview","metadata":{"permalink":"/blog/google-interview","source":"@site/blog/2025-04-20-google-interview-experience/index.md","title":"Failing Google\u2019s Final Round\u200a\u2014\u200aWhat I Learned","description":"Google Interview","date":"2025-04-20T00:00:00.000Z","tags":[{"inline":false,"label":"Interview","permalink":"/blog/tags/blog/tags/interview"},{"inline":false,"label":"Google","permalink":"/blog/tags/blog/tags/google"}],"readingTime":4.72,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"google-interview","title":"Failing Google\u2019s Final Round\u200a\u2014\u200aWhat I Learned","authors":"shekhar-patil","tags":["interview","google"],"image":"./google.webp"},"unlisted":false,"prevItem":{"title":"Introducing My New Ruby Gem - PDFScanner","permalink":"/blog/scan-pdf-files-with-pdfscanner-gem"},"nextItem":{"title":"Worker pool pattern in Golang","permalink":"/blog/worker-pool-pattern"}},"content":"![Google Interview](./google.webp)\\n\\nLike many of us, I used to only share the good stuff\u200a\u2014\u200ajob offers, achievements, career milestones. But over time, I realized failures are just as important. They teach us, humble us, and help others feel less alone in their journey.\\n\x3c!--truncate--\x3e\\nThis post is about my experience interviewing at Google. I made it to the final round but didn\u2019t get the offer. It hurt, but I also learned a lot. I\u2019m sharing my journey in hopes that it helps you prepare better.\\n\\n---\\n\\n## How It Started\\n\\nI applied through the [Google Careers](https://careers.google.com/) page around mid-November 2024.. This time, instead of the usual rejection email, I got a call from a Google recruiter\u200a\u2014\u200aa promising start. He scheduled first Screening Call.\\n\\n## Initial HR Round: The Screening Call\\n\\nThe recruiter asked about my education, experience, projects, the tech I\u2019ve worked with, and the scale of systems I\u2019ve built. It was a standard screening call\u2014until they asked:\\n\\n**\\"Have you done any competitive programming?\\"**\\n\\nAt the time, I had solved around 90 problems on LeetCode, mostly Easy and Medium. I was honest and asked for a month to prepare before the next step.\\n\\n---\\n\\n## How Google Evaluates Candidates\\n\\nBefore getting into the rounds, it\u2019s helpful to know how Google evaluates you. After each interview, feedback is given as one of these:\\n\\n- Strong No Hire\\n- No Hire\\n- Leaning No Hire\\n- Leaning Hire\\n- Hire\\n- Strong Hire\\n\\nOnly consistent \\"Hire\\" or \\"Strong Hire\\" ratings lead to an offer.\\n\\n---\\n\\n## The Elimination Round\\n\\nI used the one-month prep time to study hard. I solved over 250 DSA problems, mostly on LeetCode and AlgoExpert. You can see my full preparation here:\\n\ud83d\udcd8 [DSA Roadmap](https://www.shekharpatil.tech/docs/data-structures-and-algorithms/dsa-roadmap)\\n\\nThe round was a live coding interview with three graph problems, all linked together. I had to solve and code them in a Google Doc.\\n\\nThis round went well\u2014I solved everything. Three days later, the recruiter called:\\n\\n> \\"You cleared the elimination round. Feedback is positive.\\"\\n\\n**Probable rating:** *Hire / Strong Hire*\\n\\n---\\n\\n## Technical Round 1: Low-Level System Design\\n\\nI was given a real-world scenario and asked to design core functionality using appropriate data structures. I solved it using arrays with **O(N\xb2)** time complexity.\\n\\nThe interviewer asked if I could optimize it, but under pressure, I couldn\u2019t. After the interview, I realized a **Binary Search Tree (or Red-Black Tree)** could reduce it to **O(N log N)**.\\n\\n**Probable rating:** *Leaning Hire*\\n\\n---\\n\\n## Technical Round 2: HashMap-Based Problem\\n\\nThis round focused on implementing a solution using HashMaps. I misunderstood the problem at first, which cost time. After clarification, I fixed the code in the last 15 minutes.\\n\\nThe interviewer spotted a **bug**, though the majority of my solution was correct.\\n\\n**Probable rating:** *Leaning Hire / Hire*\\n\\n---\\n\\n## Technical Round 3: Graph Problem\\n\\nThis round was tricky. I took some time to understand the problem and realized it involved **cycle detection in a graph**.\\n\\nI made mistakes in the beginning, and it took me about **35 minutes** to get the solution right. Then I did a quick dry run in the another 5 minutes. The interviewer confirmed my final solution was correct. He had a follow-up question, but we ran out of time.\\n\\n**Probable rating:** *Leaning Hire*\\n\\n---\\n\\n## The Result\\n\\nI had mixed feelings\u2014both excited and nervous. It had been almost three months of continuous effort, and I was very close to the final stage. The next round was the Googliness interview, which is mostly a behavioral round, and many people usually clear it without much trouble.\\n\\nTwo weeks later, the recruiter called and said:\\n\\n\u201cWe won\u2019t be moving forward. The feedback mentioned that you should use more optimal data structures, and your problem-solving speed needs improvement. But feel free to reapply after a year.\u201d\\n\\nIt was disappointing to hear, especially after coming so far. But I didn\u2019t see it as a failure. Here\u2019s why.\\n\\n---\\n\\n## What I Gained\\n\\nThe whole process took almost **3-4 months**, and in that time:\\n\\n- I moved from **Ruby** to **Golang** (You can start Golang Here https://www.shekharpatil.tech/docs/golang/intro)\\n- I developed a strong understanding of low level system design and data structures\\n- I solved hundreds of problems and built my roadmap here https://www.shekharpatil.tech/docs/data-structures-and-algorithms/dsa-roadmap\\n- I learned what top-tier companies really look for: correctness, speed, clarity, and optimality\\n\\n---\\n\\n## \ud83d\udee0\ufe0f Key Takeaways for You\\n\\n1. **Know your best language:** I chose Go, but I\'m more fluent in Ruby. In time-bound interviews, using a language you\u2019re super comfortable with makes a big difference.\\n2. **Manage your time:** Getting the right answer isn\u2019t enough. Google looks at how quickly and efficiently you solve problems.\\n3. **Simulate real interview conditions:** Use a timer. Code in a shared doc. Practice talking while solving.\\n4. **Learn from mistakes:** Every small mistake taught me something valuable.\\n\\n---\\n\\n## \u2705 What\u2019s Next?\\n\\nI\u2019m not giving up. I\u2019ll reapply in a year. Till then, I\u2019m focused on:\\n\\n- Advanced system design\\n- Distributed systems\\n- Speeding up problem-solving\\n- Real-world contributions\\n- Mastering Go and revisiting Ruby\\n\\nIf you\'re preparing for Google or any FAANG interview, check out my:\\n\\n- \ud83d\udcd8 [DSA Roadmap](https://www.shekharpatil.tech/docs/data-structures-and-algorithms/dsa-roadmap)\\n- \u270d\ufe0f [All My Blogs](https://www.shekharpatil.tech/blog)\\n\\n---\\n\\n## \ud83c\udf10 Explore More\\n\\n- \ud83e\uddd1\u200d\ud83d\udcbb [My Website & Projects](https://www.shekharpatil.tech)\\n- \ud83d\udcda [Golang Learning Path](https://www.shekharpatil.tech/docs/golang/intro)\\n- \ud83e\udde0 [DSA Roadmap](https://www.shekharpatil.tech/docs/data-structures-and-algorithms/dsa-roadmap)\\n\\n---\\n\\n## \ud83d\ude4c Final Thoughts\\n\\nNot getting into Google stung\u2014but the journey changed me. I learned more in three months than I had in the past year. If you\u2019re going through something similar, just know this: you\u2019re not alone, and every setback is a setup for growth."},{"id":"worker-pool-pattern","metadata":{"permalink":"/blog/worker-pool-pattern","source":"@site/blog/2024-08-08-worker-pool-pattern/index.md","title":"Worker pool pattern in Golang","description":"What is worker pool pattern?","date":"2024-08-08T00:00:00.000Z","tags":[{"inline":false,"label":"Golang","permalink":"/blog/tags/golang","description":"Go is a statically typed, compiled high-level programming language designed at Google..."},{"inline":true,"label":"Design Pattern","permalink":"/blog/tags/design-pattern"},{"inline":true,"label":"Concurrency","permalink":"/blog/tags/concurrency"}],"readingTime":1.99,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"worker-pool-pattern","title":"Worker pool pattern in Golang","authors":"shekhar-patil","tags":["golang","Design Pattern","Concurrency"],"image":"./worker-pool-pattern.jpg"},"unlisted":false,"prevItem":{"title":"Failing Google\u2019s Final Round\u200a\u2014\u200aWhat I Learned","permalink":"/blog/google-interview"},"nextItem":{"title":"How to create and use Rake task in ruby and use it in the Rails?","permalink":"/blog/rake-task-in-rails"}},"content":"### What is worker pool pattern?\\n\\nThe Worker Pool pattern is a concurrency pattern in Go that allows you to manage and control the number of goroutines working on a set of tasks. This pattern is particularly useful when you have a large number of tasks to process and want to limit the number of concurrent goroutines to prevent excessive resource usage.\\n\\n![Worker pool pattern](./worker-pool-pattern.jpg)\\n\\n\x3c!--truncate--\x3e\\n\\n### The basic flow of the worker pool pattern looks like this:\\n\\n```go\\npackage main\\n\\nfunc main() {\\n    numJobs := 10\\n    numWorkers := 3\\n\\n\\n    // Create job and result channels\\n\\n    // Start the worker pool\\n\\n    // Submit jobs to workers\\n\\n    // Collect results\\n\\n    // Wait for all goroutines to finish\\n}\\n```\\n\\n### Here is the final code implementing the Worker Pool pattern:\\n\\nCollects results in a separate goroutine.\\n\\n```go\\npackage main\\n\\nimport (\\n    \\"fmt\\"\\n    \\"sync\\"\\n)\\n\\ntype Job struct {\\n    Id    int\\n    Value int\\n}\\n\\ntype Result struct {\\n    JobId int\\n    Value int\\n}\\n\\ntype WorkerPool struct {\\n    numJobs    int\\n    numWorkers int\\n    jobs       chan Job\\n    results    chan Result\\n    wg         sync.WaitGroup // WaitGroup to track all worker goroutines\\n}\\n\\nfunc (wp *WorkerPool) StartWorker(id int) {\\n    defer wp.wg.Done()\\n\\n    for job := range wp.jobs {\\n        fmt.Printf(\\"Job %d processed by worker %d\\\\n\\", job.Id, id)\\n        wp.results <- Result{JobId: job.Id, Value: job.Value * 1}\\n    }\\n}\\n\\nfunc (wp *WorkerPool) StartWorkers() {\\n    for i := 0; i < wp.numWorkers; i++ {\\n        wp.wg.Add(1)\\n        go wp.StartWorker(i)\\n    }\\n}\\n\\nfunc (wp *WorkerPool) SubmitJobs() {\\n    for i := 0; i < wp.numJobs; i++ {\\n        wp.jobs <- Job{Id: i, Value: i}\\n    }\\n    close(wp.jobs)\\n}\\n\\nfunc (wp *WorkerPool) PrintResults(wg *sync.WaitGroup) {\\n    defer wg.Done()\\n\\n    for result := range wp.results {\\n        fmt.Printf(\\"Result: Job %d Value %d\\\\n\\", result.JobId, result.Value)\\n    }\\n}\\n\\nfunc main() {\\n    numJobs := 10\\n    numWorkers := 3\\n    var wg sync.WaitGroup // WaitGroup to track the results printer goroutine\\n\\n    // Initialize the WorkerPool with job and result channels\\n    wp := WorkerPool{\\n        numJobs:    numJobs,\\n        numWorkers: numWorkers,\\n        jobs:       make(chan Job, numJobs),\\n        results:    make(chan Result, numJobs),\\n    }\\n\\n    // Start workers\\n    wp.StartWorkers()\\n\\n    // Submit jobs to the job channel\\n    go func() {\\n        wp.SubmitJobs()\\n    }()\\n\\n    // Start the results printer goroutine\\n    wg.Add(1)\\n    go wp.PrintResults(&wg)\\n\\n    // Wait for all worker goroutines to complete\\n    wp.wg.Wait()\\n\\n    // Close the results channel once all workers are done\\n    close(wp.results)\\n\\n    // Wait for the results printer to finish\\n    wg.Wait()\\n}\\n\\n\\n```\\n\\nWe use two separate WaitGroups in this pattern:\\n\\n1. **Worker WaitGroup**: Tracks when all worker goroutines have finished their tasks.\\n2. **Results WaitGroup**: Ensures the results printing goroutine completes its work after all results are processed.\\n\\nThis separation allows us to manage the lifecycle of workers and results printing independently, ensuring that all tasks are processed and printed correctly."},{"id":"rake-task-in-rails","metadata":{"permalink":"/blog/rake-task-in-rails","source":"@site/blog/2020-10-4-how-to-create-rake-task.md","title":"How to create and use Rake task in ruby and use it in the Rails?","description":"Sometimes, We need to have a task that can be executed at regular basic at some time. In ruby, we have a rake task to define and execute this task at any time.  We can use rake tasks in Rails for various purposes.","date":"2020-10-04T00:00:00.000Z","tags":[{"inline":false,"label":"Rails","permalink":"/blog/tags/rails","description":"Ruby on Rails is a server-side web application framework..."},{"inline":false,"label":"Ruby","permalink":"/blog/tags/ruby","description":"A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write."}],"readingTime":2.16,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"rake-task-in-rails","title":"How to create and use Rake task in ruby and use it in the Rails?","authors":"shekhar-patil","tags":["rails","ruby"]},"unlisted":false,"prevItem":{"title":"Worker pool pattern in Golang","permalink":"/blog/worker-pool-pattern"},"nextItem":{"title":"Postgres users and their permission issue.","permalink":"/blog/postgres-permission-denied"}},"content":"Sometimes, We need to have a task that can be executed at regular basic at some time. In ruby, we have a rake task to define and execute this task at any time.  We can use rake tasks in Rails for various purposes.\\n\\n\x3c!--truncate--\x3e\\n\\nRake is inspired by Linux [make utility](https://en.wikipedia.org/wiki/Make_(software)). Its name comes from the `Ruby Make`. Rake is a task management utility that reads and executes the tasks defined in the ruby language in the \'Rakefile`. It was written by the late [Jim Weirich](https://en.wikipedia.org/wiki/Jim_Weirich).\\n\\n# How to create a Rake task.\\n\\nCreate a file with the name \'Rakefile\' and write the following content in it.\\n` $ touch Rakefile`\\n\\n```\\ndesc \'print hello world\'\\ntask :hello_world do\\n  puts \'Hello world from Rubyist\'\\nend\\n```\\nHere `desc` command defines the description of the task and `task` command defines the actual task that needs to be executed. Here we are defining a simple task which is printing \\"Hello world from Rubyist.\\".\\n\\nIf you are in the directory containing the Rakefile then you can execute the following commands:\\n```\\n$ rake --task              This command will show all the tasks defined in the Rakefile along with its description.\\n=> rake hello_world        # Print hello world\\n```\\n\\nNow we can execute the task using the following command\\n```\\n$ rake hello_world\\n=> Hello world from Rubyist\\n```\\nWe can also use namespace while defining the Rake task add the following code to Rakefile:\\n```\\ndesc \'Display files from the current directory\'\\nnamespace :admin do\\n  task :display_files do\\n    system(\'ls\')\\n  end\\nend\\n```\\nLet\'s see all tasks once again:\\n```\\n$ rake --task\\n=> rake admin:display_files  # Display files from the current directory\\n   rake hello_world          # print hello world\\n```\\nWe can execute this task as follows:\\n```\\n$ rake admin:hello_world\\n(It should display files from your current directory)\\n```\\nNamespacing to rake task is always good when the number of tasks is more and also it separates the context of the task.\\n\\n\\nIn the Rails project we can see many rake tasks as following:\\n\\n* rails db:migrate\\n* rails routes\\n* rake tmp:clear\\n* rake tmp:create\\n\\nWe can find out many more tasks by executing `rake --task` command in the Rails application root directory.\\n\\n## How to define custom rake tasks in Rails?\\n\\nWe can create file with `.rake` extension in `/lib/tasks/` folder.\\n\\n```\\n# lib/tasks/clear_logs.rake\\n\\nnamespace :Logs do\\n  desc \'clear the log files\'\\n  task clear: :environment do\\n    Dir[\\"log/*.log\\"].each do |file|\\n       File.unlink(file)\\n    end\\n  end\\nend\\n```\\nAbove task is deleting all files from `log directory`.\\n\\nNow we can simply execute this task as following:\\n```\\n$ rake Logs:clear\\n```\\n\\nI hope you loved it.\\nPlease feel free to contact me on [twitter](https://twitter.com/Shekharpatil95)."},{"id":"postgres-permission-denied","metadata":{"permalink":"/blog/postgres-permission-denied","source":"@site/blog/2020-04-09-permission-denied-for-relation-error-in-postgres.md","title":"Postgres users and their permission issue.","description":"Have you ever faced the following issue while fetching records from Postgres in the rails?","date":"2020-04-09T00:00:00.000Z","tags":[{"inline":false,"label":"Rails","permalink":"/blog/tags/rails","description":"Ruby on Rails is a server-side web application framework..."},{"inline":false,"label":"Postgres","permalink":"/blog/tags/blog/tags/postgres"}],"readingTime":1.63,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"postgres-permission-denied","title":"Postgres users and their permission issue.","authors":"shekhar-patil","tags":["rails","postgres"]},"unlisted":false,"prevItem":{"title":"How to create and use Rake task in ruby and use it in the Rails?","permalink":"/blog/rake-task-in-rails"},"nextItem":{"title":"Do you know how helpful the const_get method is?","permalink":"/blog/const-get-method-in-ruby"}},"content":"Have you ever faced the following issue while fetching records from Postgres in the rails?\\n\\n**`ActiveRecord::StatementInvalid: PG::InsufficientPrivilege: ERROR:  permission denied for relation`**\\n\\n\x3c!--truncate--\x3e\\n\\nI had following configuration in my database.yml file\\n\\n```\\ndevelopment:\\n  <<: *default\\n  database: dev_db_name\\n\\nstaging:\\n  <<: *default\\n  database: staging_db_name\\n  username: staging_db_username\\n  password: password\\n\\ntest:\\n  <<: *default\\n  database: test_db_name\\n  username: test_db_username\\n  password: password\\n```\\nSo while fetching Postgres record from rails console I was getting above mentioned error\\n\\nAnother issue was the rails were not providing the username for which permission error was occurring and I was not sure about the username used while fetching the Postgres record.\\n\\nTo check which user is getting permission error we can check Postgres log file:\\nIf you are using ubuntu the please open following file:\\n\\n`/var/log/postgresql/postgresql-10-main.log` (log file name can be different as per your Postgres version)\\n\\nIn the log file you will get line similar to the following:\\n\\n```\\n2020-04-09 17:24:01.874 IST [25904] root@dev_db_name ERROR:  permission denied for relation\\n```\\nHere we can get the username `root@dev_db_name` so `root` user is getting permission denied for the table.\\n\\nTo solve this issue use the following steps:\\n\\n* Open your Postgres console with the following command:\\n\\n  `sudo su - postgres` followed by `psql`\\n\\n* Now use `\\\\du` command to check users and their permissions.\\n\\n```\\npostgres=# \\\\du\\n                                      List of roles\\n   Role name    |                         Attributes                         | Member of\\n----------------+------------------------------------------------------------+-----------\\n postgres       | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\\n root           |                                                            | {}\\n shekhar        | Superuser, Create DB, Bypass RLS                           | {}\\n```\\nHere we can see root user don\'t have any permission\\n\\nNow grant the following permissions to the `root` user.\\n\\n```\\nGRANT ALL PRIVILEGES ON DATABASE dev_db_name to root;\\npostgres=# ALTER USER root WITH SUPERUSER CREATEDB BYPASSRLS;\\n```\\nyou can read more about the Privileges in PostgreSQL [Here](https://www.digitalocean.com/docs/databases/postgresql/how-to/modify-user-privileges/).\\n\\nI hope it will solve your problem.\\nIf you still have a problem please feel free to contact me on [patilshekhar900@gmail.com](mailto:patilshekhar900@gmail.com) or [twitter](https://twitter.com/Shekharpatil95)."},{"id":"const-get-method-in-ruby","metadata":{"permalink":"/blog/const-get-method-in-ruby","source":"@site/blog/2020-02-11-const-get-method-in-ruby.md","title":"Do you know how helpful the const_get method is?","description":"First, we will understand how the const_get method works then I will explain how we can use it in different ways and what are the use cases.","date":"2020-02-11T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/blog/tags/ruby","description":"A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write."}],"readingTime":1.73,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"const-get-method-in-ruby","title":"Do you know how helpful the const_get method is?","authors":"shekhar-patil","tags":["ruby"]},"unlisted":false,"prevItem":{"title":"Postgres users and their permission issue.","permalink":"/blog/postgres-permission-denied"},"nextItem":{"title":"Difference between puts, p, and print in ruby.","permalink":"/blog/compare-puts-p-print-in-ruby"}},"content":"First, we will understand how the const_get method works then I will explain how we can use it in different ways and what are the use cases.\\n\x3c!--truncate--\x3e\\n\\n```ruby\\nmodule Vehicle\\n  class Car\\n    WHEELS = 4\\n  end\\nend\\n\\nputs Object.const_get \'Vehicle::Car::WHEELS\'   # => 4\\n```\\n\\nHere, we can see that we have passed the string \'Vehicle::Car::WHEELS\' parameter to method const_get and it has given the outcome \'4\' which is the actual value of constant wheels.\\n\\nWe can also use some variable to store this string and get the constant\'s value bypassing this variable as a parameter to the const_get method.\\n\\nWe can also lookup the ancestor\'s constant using const_get method if the inherit flag is set as true.\\n\\n``Note:`` ancestors of some module means a list of modules included or prepend in that module.\\n\\n```ruby\\nmodule Vehicle\\n  class Car\\n    WHEELS = 4\\n  end\\n\\n  class TeslaS < Car\\n  end\\nend\\n\\nwheel_const = \'Vehicle::TeslaS::WHEELS\'\\n\\n# Here true is inherit flag which can be true or false\\nputs Object.const_get(wheel_const, true)  # => 4\\n```\\n\\n\\nHere we have given the inherit flag as true it means lookup the base class and the module Vehicle\'s ancestors as well. If we would have included/prepend some modules in our Vehicle module then the const_get method also would have lookup into those modules. \\n\\nNow, let\'s try to change that flag into false.\\n\\n```ruby\\n\\nmodule Vehicle\\n  class Car\\n    WHEELS = 4\\n  end\\n\\n  class TeslaS < Car\\n  end\\nend\\n\\nwheel_const = \'Vehicle::TeslaS::WHEELS\'\\nputs Object.const_get(wheel_const, false)\\n\\n#  Output:\\n#  Traceback (most recent call last):\\n#\\t  1: from random.rb:11:in `<main>\'\\n#  random.rb:11:in `const_get\': uninitialized constant Vehicle::TeslaS::WHEELS (NameError)\\n```\\n\\nNow, we are getting an error uninitialized constant `Vehicle::TeslaS::WHEELS` because now we have set inherit flag as a false so const_get method will not lookup base class or modules ancestors for `WHEEL` constant. It will throw an error because the `WHEEL` constant is not defined in the TeslaS class.\\n\\n``Note:`` If we do not mention the inherit flag then it is by default true.\\n\\nI hope you loved it.\\nPlease feel free to contact me on [twitter](https://twitter.com/Shekharpatil95)."},{"id":"compare-puts-p-print-in-ruby","metadata":{"permalink":"/blog/compare-puts-p-print-in-ruby","source":"@site/blog/2019-10-13-difference-between-puts-print-and-p-in-ruby.md","title":"Difference between puts, p, and print in ruby.","description":"Ruby is developer friendly language and it provides many ways to perform same task. For example for printing the output on the console we can use puts, prints and p. But multiple ways to do same task means more confusion for selecting correct way for our use case. In this blog we will discuss about difference between puts, print and p so that we can select correct method as per our use case.","date":"2019-10-13T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/blog/tags/ruby","description":"A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write."}],"readingTime":2.25,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"compare-puts-p-print-in-ruby","title":"Difference between puts, p, and print in ruby.","authors":"shekhar-patil","tags":["ruby"]},"unlisted":false,"prevItem":{"title":"Do you know how helpful the const_get method is?","permalink":"/blog/const-get-method-in-ruby"},"nextItem":{"title":"Extend, Merge methods in the Javascript.","permalink":"/blog/how-to-merge-objects-in-javascript"}},"content":"Ruby is developer friendly language and it provides many ways to perform same task. For example for printing the output on the console we can use puts, prints and p. But multiple ways to do same task means more confusion for selecting correct way for our use case. In this blog we will discuss about difference between puts, print and p so that we can select correct method as per our use case.\\n\\n\x3c!--truncate--\x3e\\n\\n#### Let\'s start with `hello world` using all of this.\\n\\n#### 1. Using `puts`.\\n\\n```ruby\\n> puts \'hello world\'\\nhello world\\n => nil\\n```\\n#### 2. Using `p`.\\n\\n```ruby\\n> p \'hello world\'\\n\\"hello world\\"\\n => \\"hello world\\"\\n```\\n#### 3. Using `print`\\n\\n```ruby\\nprint \'hello world\'\\nhello world => nil\\n```\\n\\nYou must have observed there is some difference in every output.\\n\\n#### Few observations:\\n\\n1. puts and print has return `nil` while p has return the input we have passed to it.\\n2. p has shown output in string format.\\n3. return value of puts and p has printed on next line and for print return value is on same line.\\n\\n### Let\'s take one more example for better understanding:\\n\\nNow we create one file with extension .rb and paste below given code in that file.\\n\\n1.Example of puts:\\n\\n```ruby\\nA = \'I\'\\nB = \'Love\'\\nC = \'Ruby\'\\n\\nputs A\\nputs B\\nputs C\\n```\\nNow we can run this file using `ruby filename.rb` in the terminal and before running this command confirm that you are in the same directory where you have created ruby file.\\n\\noutput of above code will be as following\\n\\nOutput of puts:\\n\\n```ruby\\nI\\nLove\\nRuby\\n```\\n\\nNow we will execute same code for print and p.\\n\\n2.Using print\\n\\n```ruby\\nA = \'I\'\\nB = \'Love\'\\nC = \'Ruby\'\\n\\nprint A\\nprint B\\nprint C\\n```\\nOutput of print:\\n```\\nILoveRuby\\n```\\n\\n3.Using p.\\n\\n```ruby\\nA = \'I\'\\nB = \'Love\'\\nC = \'Ruby\'\\n\\np A\\np B\\np C\\n```\\nOutput of p:\\n```\\n\\"I\\"\\n\\"Love\\"\\n\\"Ruby\\"\\n```\\n\\nNow you must have more clarity about all of this methods.\\n\\nLet\'s conclude the blog:\\n\\n1. puts: puts add newline character at the end of the output. that is why we got return value `nil` on the next line.\\n\\n2. print: print does not add newline character at the end of output because of that the return value of print that is `nil` is printed on the same line where output is printed.\\n\\n3. p: p does not change data type of the input provided to it. if we are passing string type of input it also prints the string type of output. Most importantly, unlike to puts and print p does not return nil value. It returns the same value which has passed to it.\\n\\n\\nPlease feel free to contact me on [twitter](https://twitter.com/Shekharpatil95)."},{"id":"how-to-merge-objects-in-javascript","metadata":{"permalink":"/blog/how-to-merge-objects-in-javascript","source":"@site/blog/2019-08-24-how-to-merge-objects-in-javascript.md","title":"Extend, Merge methods in the Javascript.","description":"Yesterday, I was working on an issue in which database value for particular object attribute was correct but on UI it was showing the wrong value. I dig into the front-end Javascript code and I found that bug occurred while merging the two objects in Javascript. first, we will discuss how to merge two objects then I will explain what we should care about while merging two objects.","date":"2019-08-24T00:00:00.000Z","tags":[{"inline":false,"label":"Javascript","permalink":"/blog/tags/blog/tags/javascipt"}],"readingTime":1.62,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"how-to-merge-objects-in-javascript","title":"Extend, Merge methods in the Javascript.","authors":"shekhar-patil","tags":["javascipt"]},"unlisted":false,"prevItem":{"title":"Difference between puts, p, and print in ruby.","permalink":"/blog/compare-puts-p-print-in-ruby"},"nextItem":{"title":"How to use a Singleton method in the rails.","permalink":"/blog/singleton-method-in-the-ruby"}},"content":"Yesterday, I was working on an issue in which database value for particular object attribute was correct but on UI it was showing the wrong value. I dig into the front-end Javascript code and I found that bug occurred while merging the two objects in Javascript. first, we will discuss how to merge two objects then I will explain what we should care about while merging two objects.\\n\\n\x3c!--truncate--\x3e\\n\\n## How to merge objects?\\n\\n### 1. Merge two objects having distinct attributes names.\\n\\ndeclare two objects as the following:\\n```javascript\\nvar student = { \\n  student_name: \\"Rahul\\", \\n  age: 22, \\n  standard: \\"6th\\" \\n};\\n\\nvar school = { \\n  school_name: \\"SBK high school\\", \\n  location: \\"Pune\\" \\n};\\n\\n\\n```\\n\\nNow, we will use `extend` method to merge these two objects.\\n\\n```javascript\\n$.extend(student, school);\\n\\n> {student_name: \\"Rahul\\", age: 22, standard: \\"6th\\", school_name: \\"SBK high school\\", location: \\"Pune\\"}\\n```\\n\\nWe can also use the `merge` method to merge these objects\\n\\n```javascript\\n$.merge(student, school);\\n\\n> { student_name: \\"Rahul\\", age: 22, standard: \\"6th\\", length: undefined}\\n```\\n\\n### 2. Merge two objects having some common attributes names.\\n\\nWe don\'t have to care where there are distinct attributes in the objects. But when there are some common attribute names then those attributes value gets an override.\\n\\n\\ndeclare two objects having the same attribute names like the following:\\n```javascript\\nvar student = { \\n  name: \\"Rahul\\", \\n  age: 22, \\n  standard: \\"6th\\" \\n};\\n\\nvar school = { \\n  name: \\"SBK high school\\", \\n  location: \\"Pune\\" \\n};\\n\\n\\n```\\n\\nNow, we will use `extend` method to merge these two objects.\\n\\n```javascript\\n$.extend(student, school);\\n\\n> {name: \\"SBK high school\\", age: 22, standard: \\"6th\\", location: \\"Pune\\"}\\n```\\n\\nWe can also use the `merge` method to merge these objects\\n\\n```javascript\\n$.merge(student, school);\\n\\n> {name: \\"Rahul\\", age: 22, standard: \\"6th\\", length: undefined}\\n```\\n\\nNow we have understood how to merge two objects in Javascript and the difference between merge and extend method in Javascript. We should be careful while merging two objects having a common attribute name. Common attribute names can cause unexpected result in the output.\\n\\nPlease feel free to contact me on [twitter](https://twitter.com/Shekharpatil95)."},{"id":"singleton-method-in-the-ruby","metadata":{"permalink":"/blog/singleton-method-in-the-ruby","source":"@site/blog/2019-08-10-singleton-method-in-the-ruby.md","title":"How to use a Singleton method in the rails.","description":"Today I attend Ruby Conference at Pune and Singleton method and metaclass in ruby was one of the talk discussed there So, I thought to write a blog about it.","date":"2019-08-10T00:00:00.000Z","tags":[{"inline":false,"label":"Rails","permalink":"/blog/tags/rails","description":"Ruby on Rails is a server-side web application framework..."}],"readingTime":1.67,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"singleton-method-in-the-ruby","title":"How to use a Singleton method in the rails.","authors":"shekhar-patil","tags":["rails"]},"unlisted":false,"prevItem":{"title":"Extend, Merge methods in the Javascript.","permalink":"/blog/how-to-merge-objects-in-javascript"},"nextItem":{"title":"Scope in rails.","permalink":"/blog/scope-in-rails"}},"content":"Today I attend Ruby Conference at Pune and Singleton method and metaclass in ruby was one of the talk discussed there So, I thought to write a blog about it.\\n\\n\x3c!--truncate--\x3e\\n\\nIn ruby, we create the class and class has many methods written into it. When we create an object of the class we can access those methods using that object. So, the question raise in my mind was as follows.\\n\\n### 1. Who holds these methods? does class hold these methods or each object of the class holds this methods? \\n\\nLet us find it out.\\n\\n```ruby\\nclass User\\n  def role\\n    puts \\"Admin\\"\\n  end\\nend\\n\\nuser = User.new\\nuser.role         // Admin\\n\\nclass User\\n  def role\\n    puts \\"sales\\"\\n  end\\nend\\n\\nuser.role         // sales\\n```\\n\\nAs we can see we have overridden the `User` class that is why second `user.role` prints `sales`. It means all class methods are implemented in the class and also it is store in the class definitions.\\n\\nNow consider the situation where we want to create method only for a single object of the class not for all objects of the class. We can do it in the ruby using singleton methods for the class object.\\n\\n## 2. Singleton methods\\n\\nSingleton methods are the methods which are only available for a single particular object and not for all objects of the class.\\n\\nCheck the following snippet\\n\\n```ruby\\nclass User\\n  def role\\n    puts \\"Admin\\"\\n  end\\nend\\n\\nfirst_user = User.new      \\nfirst_user.role              // Admin\\n\\n// Add singleton method department for `first_user` object.\\ndef first_user.department\\n  puts \'Admin department\'\\nend\\nfirst_user.department        // Admin department\\n\\nsecond_user = User.new\\nsecond_user.role             // Admin\\nsecond_user.department       // NoMethodError (undefined method `department\' for #<User:0x000055a8b44b45d0>)\\n```\\n\\nWe can observe that department method is not available for object `second_user` because the department is singleton method for object `first_user` so it is stored on the metaclass of an object and they are independent of the parent class of the object.\\n\\nSo, Object in ruby only stores the state. Its behavior comes from the class definition. The metaclass is almost similar to a class but it can\'t be instantiated."},{"id":"scope-in-rails","metadata":{"permalink":"/blog/scope-in-rails","source":"@site/blog/2019-06-13-scope-in-rails.md","title":"Scope in rails.","description":"Rails follow the DRY principle of software development and that is \'Don\'t Repeat Yourself\'.","date":"2019-06-13T00:00:00.000Z","tags":[{"inline":false,"label":"Rails","permalink":"/blog/tags/rails","description":"Ruby on Rails is a server-side web application framework..."}],"readingTime":1.53,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"scope-in-rails","title":"Scope in rails.","authors":"shekhar-patil","tags":["rails"]},"unlisted":false,"prevItem":{"title":"How to use a Singleton method in the rails.","permalink":"/blog/singleton-method-in-the-ruby"},"nextItem":{"title":"Relational database.","permalink":"/blog/relational-database"}},"content":"Rails follow the DRY principle of software development and that is \'Don\'t Repeat Yourself\'.\\nScopes are great to keep our code DRY and well organized. It\'s just a set of pre-defined SQL queries that we can use to write complex queries.\\n\\n\x3c!--truncate--\x3e\\n\\nSuppose we want to fetch users who have status `active`. So, we can simply write the following query\\n\\n```ruby\\n\\ndef index\\n  @active_users = User.where(status: \\"active\\")\\nend\\n```\\n\\nBut we may need to re-use this code multiple times in our project. So instead of writing the same code, again and again, we can define a scope for it.\\n\\n```ruby\\nclass user < ActiveRecord::Base\\n  scope :active, -> { where(status: \\"active\\") }\\nend\\n```\\n\\nNow, we can simply use an active scope to fetch all active users as following:\\n\\n```ruby\\ndef index\\n  @active_users = User.active\\nend\\n```\\n\\n## 1. Scope with parameter.\\n\\nwe can give parameters to scope.\\n\\n```ruby\\nclass Fruit < ActiveRecord::Base\\n  scope :color, -> (color_name){ where(color: color_name) }\\nend\\n```\\nnow in our Fruit controller we can use\\n\\n```ruby\\ndef Index\\n  @red_fruits = Fruit.color(\\"red\\")\\n  @yellow_fruits = Fruit.color(\\"yellow\\")\\nend\\n```\\n\\n## 2. Scopes Are Chainable\\n\\nThis is really interesting and it makes scope even more useful.\\n\\n```ruby\\nclass User < ApplicationRecord\\n  scope :active, -> { where(status: \\"active\\") }\\n  scope :recent, -> { where(\'created_at < ?\', 1.week.ago }\\nend\\n```\\n\\nwe can use it in the controller as following;\\n\\n```ruby\\ndef index\\n  @users = User.active.recent\\nend\\n```\\n\\n## 3. How exactly scope works in rails\\n\\nlook at the active scope once again\\n\\n```ruby\\nclass user < ActiveRecord::Base\\n  scope :active, -> { where(status: \\"active\\") }\\nend\\n```\\nwe can achieve the same result using the following class method as given. Basically, instead of writing class method scope is syntactical sugar for writing queries.\\n\\n```ruby\\n\\ndef self.active\\n  User.where(status: \\"active\\")\\nend\\n```\\n\\nI would love to hear some of the interesting topics related to rails which I can explore and write a blog about it on [Twitter](https://twitter.com/Shekharpatil95).\\n\\nCheers!"},{"id":"relational-database","metadata":{"permalink":"/blog/relational-database","source":"@site/blog/2019-05-16-relational-database.md","title":"Relational database.","description":"In the internet era, every organization is storing large data and it is difficult to maintain this much data. There are different databases available but it is very difficult to select the best suitable for our requirement. Mainly databases are classified into Relational database and Non-relational database.","date":"2019-05-16T00:00:00.000Z","tags":[{"inline":false,"label":"MySQL","permalink":"/blog/tags/mysql","description":"MySQL is an open-source relational database..."}],"readingTime":1.62,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"relational-database","title":"Relational database.","authors":"shekhar-patil","tags":["mysql"]},"unlisted":false,"prevItem":{"title":"Scope in rails.","permalink":"/blog/scope-in-rails"},"nextItem":{"title":"Eager loading and N+1 query in rails.","permalink":"/blog/eager-loading-and-N-plus-1-query"}},"content":"In the internet era, every organization is storing large data and it is difficult to maintain this much data. There are different databases available but it is very difficult to select the best suitable for our requirement. Mainly databases are classified into Relational database and Non-relational database. \\n\\n\x3c!--truncate--\x3e\\n\\n**Relational database:** It is also called SQL(Structured Query Language) database and it is a set of data organized by tables, records and columns.\\n\\nEx: MySQL, MariaDB, and Postgres etc.\\n\\n**Non-relational database:** It is also called NoSQL(Non Structured Query Language) database. In NoSQL databases data is stored in documents and collections. What NoSQL databases gain in speed, flexibility, availability and partition tolerance, they lack in data consistency and most NoSQL stores can not handle [ACID transactions](https://en.wikipedia.org/wiki/ACID_(computer_science)).\\n\\nEx: MongoDB, Cassandra, and HBase.\\n\\nThough there are many database options available today, Relational database is still best choice. New SQL and NoSQL have their place, but a relational database is still the solid choice.\\n\\n### Why Relational database is still best choice?\\n\\n**Ease of Use:** The use of tables to store data in columns and rows makes it easy to access and manage data.\\n\\n**Data Security:** With an RDBMS you can hide sensitive tables and give them their authorization codes, providing a layer of protection for your data\\n\\n**SQL Standard:** SQL is a standardized language well understood by many applications, and many of the alternative database options provide SQL interfaces.\\n\\n**Data Integrity:** the structure of the relational database preserves the integrity of the data and makes it easier to meet compliance regulations.\\n\\n**Performance:**  An RDBMS uses indexes to sort data and speed up performance, and supports both desktop and web applications.\\n\\n**Development and  Support:** The large players \u2014 Oracle, Microsoft, SAP \u2014 have a vested interest in continuing to develop and evolve their database offering to meet modern standards.\\n\\n**RDBMS Standards:**  Relational databases adhere to ACID properties to ensure the reliability of transactions."},{"id":"eager-loading-and-N-plus-1-query","metadata":{"permalink":"/blog/eager-loading-and-N-plus-1-query","source":"@site/blog/2019-05-10-eager-loading-and-n-plus-1-query.md","title":"Eager loading and N+1 query in rails.","description":"Sometimes, the implementation of an algorithm can make performance worst. Then it does not matter whether it has used the faster programming language like C or slower like Ruby. So we should implement the algorithms properly. Same while dealing with the database we should use proper queries so that the performance should not affect.","date":"2019-05-10T00:00:00.000Z","tags":[{"inline":false,"label":"Rails","permalink":"/blog/tags/rails","description":"Ruby on Rails is a server-side web application framework..."},{"inline":false,"label":"Ruby","permalink":"/blog/tags/ruby","description":"A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write."}],"readingTime":2.91,"hasTruncateMarker":true,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","github":"shekhar-patil","linkedin":"https://www.linkedin.com/in/shekhar-patil-834462135/","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","key":"shekhar-patil","page":null}],"frontMatter":{"slug":"eager-loading-and-N-plus-1-query","title":"Eager loading and N+1 query in rails.","authors":"shekhar-patil","tags":["rails","ruby"]},"unlisted":false,"prevItem":{"title":"Relational database.","permalink":"/blog/relational-database"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"Sometimes, the implementation of an algorithm can make performance worst. Then it does not matter whether it has used the faster programming language like C or slower like Ruby. So we should implement the algorithms properly. Same while dealing with the database we should use proper queries so that the performance should not affect.\\n\\n\x3c!--truncate--\x3e\\n\\n### Let\'s observe an example.\\n\\n```ruby\\nclass College < ApplicationRecord\\n  has_many :students\\nend\\n```\\n```ruby\\nclass Student < ApplicationRecord\\n  belongs_to :college\\nend\\n```\\nNow create some colleges and respective students.\\n\\n## N+1 query in Rails\\n\\nIf we wanted to list the first ten students and their colleges, We could write the following code.\\n\\n```sql\\nstudents = Student.limit(10)\\n\\nstudents.each do |student|\\n  puts \\"#{student.college.name} build number #{student.name}\\"\\nend\\n```\\nThe above code works, but it makes far too many independent database queries:\\n\\n```sql\\nStudent Load (0.3ms) SELECT \\"students\\".* FROM \\"students\\" LIMIT ? [[\\"LIMIT\\", 10]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 1], [\\"LIMIT\\", 1]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 1], [\\"LIMIT\\", 1]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 1], [\\"LIMIT\\", 1]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 1], [\\"LIMIT\\", 1]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 1], [\\"LIMIT\\", 1]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 1], [\\"LIMIT\\", 1]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 2], [\\"LIMIT\\", 1]]\\nCollege Load (0.1ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 2], [\\"LIMIT\\", 1]]\\nCollege Load (0.2ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 2], [\\"LIMIT\\", 1]]\\nCollege Load (0.1ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" = ? LIMIT ? [[\\"id\\", 2], [\\"LIMIT\\", 1]]\\n```\\n\\nCurrently, There are 11 independent queries to fetch 10 students. One query to fetch students and other N queries to fetch college in each iteration. hence the total number of queries is N+1. Now are fetching just 10 records but in the real-time scenario, the number of required records can be large. Suppose we want to fetch 10000 records then we\'ll need to connect database 10001 times and it will degrade the performance of the application heavily.\\n\\n## Eager loading in Rails\\n\\nTo avoid the performance degradation of the previous example we need to reduce the number of independent queries to the database. In rails, this is done by eager loading associated relations. In the eager loading, we collect the required data with only one query.\\n\\n```sql\\nstudents = Student.includes(:college).limit(10)\\n\\nstudents.each do |student|\\n  puts \\"#{student.college.name} build number #{student.name}\\"\\nend\\n```\\nThis time we\'ll use one query to fetch the students and another for fetching the associated colleges.\\n```sql\\nStudent Load (0.4ms) SELECT \\"students\\".* FROM \\"students\\"\\nCollege Load (0.4ms) SELECT \\"colleges\\".* FROM \\"colleges\\" WHERE \\"colleges\\".\\"id\\" IN (?, ?, ?, ?) [[\\"id\\", 1], [\\"id\\", 2], [\\"id\\", 3], [\\"id\\", 4]]\\n```\\nNow, we\'ll required only two queries. Even though we wanted 10000 records only two queries are required to fetch the records from the database and it will improve the performance of our application.\\n\\nFor comparison, the time necessary to load and display 10 builds in my system is 2.1 milliseconds without eager loading and only 0.8 milliseconds with eager loading. This is s huge difference. Currently, In the case of a large number of record fetching, this time difference can be even far more.\\n\\nI would love to hear some of your tips on dealing with N+1 queries on [twitter](https://twitter.com/Shekharpatil95).\\n\\nCheers!"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","source":"@site/blog/2019-01-04-first-post.md","title":"First Blog Post","description":"This is my first post, how exciting!!","date":"2019-01-04T00:00:00.000Z","tags":[],"readingTime":0.04,"hasTruncateMarker":false,"authors":[{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","image_url":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","socials":{},"key":null,"page":null}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Shekhar Patil","title":"Full stack developer.","url":"https://github.com/shekhar-patil","image_url":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4","imageURL":"https://avatars.githubusercontent.com/u/16961675?s=400&u=70e54719e239d1148c24bc8661a72ee9e59f420d&v=4"},"tags":[]},"unlisted":false,"prevItem":{"title":"Eager loading and N+1 query in rails.","permalink":"/blog/eager-loading-and-N-plus-1-query"}},"content":"This is my first post, how exciting!!"}]}}')}}]);