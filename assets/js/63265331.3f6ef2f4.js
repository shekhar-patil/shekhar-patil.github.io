"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[2630],{5461:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm","title":"Dijkstra\'s Algorithm","description":"Feel free to follow my work on GitHub: Dijkstra Algorithm in Go.","source":"@site/docs/data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm.md","sourceDirName":"data-structures-and-algorithms/graph-algorithms","slug":"/data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm","permalink":"/docs/data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"dsaSidebar","previous":{"title":"Prim\u2019s Algorithm \u2014 Minimum Spanning Tree (MST)","permalink":"/docs/data-structures-and-algorithms/graph-algorithms/prims-algorithm"},"next":{"title":"Dynamic Programming","permalink":"/docs/category/dynamic-programming"}}');var r=e(4848),s=e(8453);const a={sidebar_position:2},o="Dijkstra's Algorithm",d={},h=[];function c(n){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"dijkstras-algorithm",children:"Dijkstra's Algorithm"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n  "container/heap"\n  "fmt"\n  "math"\n)\n\ntype MinHeap []Node\n\ntype Node struct {\n  vertex int\n  dist   int\n}\n\nfunc (h MinHeap) Len() int           { return len(h) }\nfunc (h MinHeap) Less(i, j int) bool { return h[i].dist < h[j].dist }\nfunc (h MinHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\nfunc (h *MinHeap) Push(x any)        { *h = append(*h, x.(Node)) }\nfunc (h *MinHeap) Pop() any {\n  old := *h\n  n := len(old)\n  node := old[n-1]\n  *h = old[:n-1]\n  return node\n}\n\nfunc Dijkstra(edges [][][]int, start int) map[int]int {\n  dist := make(map[int]int)\n  for i := 0; i < len(edges); i++ {\n    dist[i] = math.MaxInt32\n  }\n  dist[start] = 0\n\n  // Min-heap to track the shortest distances\n  minHeap := &MinHeap{}\n  heap.Init(minHeap)\n  heap.Push(minHeap, Node{vertex: start, dist: 0})\n\n  visited := make(map[int]bool)\n\n  for minHeap.Len() > 0 {\n    node := heap.Pop(minHeap).(Node)\n    if visited[node.vertex] {\n      continue\n    }\n    visited[node.vertex] = true\n\n    // Explore neighbors\n    for _, neighbor := range edges[node.vertex] {\n      dest, weight := neighbor[0], neighbor[1]\n      newDist := dist[node.vertex] + weight\n      if newDist < dist[dest] {\n        dist[dest] = newDist\n        heap.Push(minHeap, Node{vertex: dest, dist: newDist})\n      }\n    }\n  }\n  return dist\n}\n\nfunc main() {\n  // Input graph in adjacency list format\n  start := 0\n  edges := [][][]int{\n    {{1, 7}},          // Node 0 connects to Node 1 with weight 7\n    {{2, 7}, {3, 20}}, // Node 1 connects to Node 2 with weight 7, Node 3 with weight 20\n    {{3, 14}},         // Node 2 connects to Node 3 with weight 14\n    {{4, 2}},          // Node 3 connects to Node 4 with weight 2\n    {},                // Node 4 has no neighbors\n    {},                // Node 5 has no neighbors\n  }\n\n  // Compute shortest paths\n  distances := Dijkstra(edges, start)\n\n  // Output the results\n  fmt.Println("Shortest distances from source:", start)\n  for vertex, distance := range distances {\n    fmt.Printf("Vertex %d: %d\\n", vertex, distance)\n  }\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Feel free to follow my work on GitHub: ",(0,r.jsx)(t.a,{href:"https://github.com/shekhar-patil/data_structure_and_algorithms/blob/main/graph_algorithms/dijkstra_algorithm.go",children:"Dijkstra Algorithm in Go"}),"."]})]})}function l(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>a,x:()=>o});var i=e(6540);const r={},s=i.createContext(r);function a(n){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function o(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(s.Provider,{value:t},n.children)}}}]);