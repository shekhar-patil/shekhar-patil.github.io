"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[6709],{3621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"data-structures-and-algorithms/data-structures/tree/general-tree","title":"General Tree","description":"Feel free to follow my work on GitHub: Singly linked list in Python.","source":"@site/docs/data-structures-and-algorithms/data-structures/tree/general-tree.md","sourceDirName":"data-structures-and-algorithms/data-structures/tree","slug":"/data-structures-and-algorithms/data-structures/tree/general-tree","permalink":"/docs/data-structures-and-algorithms/data-structures/tree/general-tree","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"dsaSidebar","previous":{"title":"Tree","permalink":"/docs/category/tree"},"next":{"title":"Binary Search Tree","permalink":"/docs/data-structures-and-algorithms/data-structures/tree/binary-search-tree"}}');var a=t(4848),s=t(8453);const d={sidebar_position:1},i="General Tree",o={},l=[];function c(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"general-tree",children:"General Tree"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'class TreeNode:\n  def __init__(self, name, designation) -> None:\n    self.name = name\n    self.designation = designation\n    self.child = []\n    self.parent = None\n\n  def add_node(self, name, designation):\n    child = TreeNode(name, designation)\n    child.parent = self\n\n    self.child += [child]\n    return child\n\n  def print_tree(self):\n    padding = self.node_level() * " " * 3\n    padding += ("|_ _" if self.parent else "")\n    print(padding + self.name + " (" + self.designation + ")")\n    if self.child:\n      for node in self.child:\n        node.print_tree()\n\n  def node_level(self):\n    parent = self.parent\n    level = 0\n    while parent:\n      level += 1\n      parent = parent.parent\n\n    return level\n\n  def build_tree(self):\n    cto = root.add_node("Shyamu", "CTO")\n    hr_head = root.add_node("Nikita", "HR Head")\n\n    infra_head = cto.add_node("ramu", "Infra Head")\n    cto.add_node("rahul", "Application head")\n\n    hr_head.add_node("akshay", "Recruitment Manager")\n    hr_head.add_node("paresh", "Policy Manager")\n\n    infra_head.add_node("Dhaval", "Cloud Manager")\n    infra_head.add_node("ABhijit", "App Manager")\n\n\n\nif __name__ == "__main__":\n  root = TreeNode("Shekhar Patil", "CEO")\n\n  root.build_tree()\n\n  root.print_tree()\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Feel free to follow my work on GitHub: ",(0,a.jsx)(n.a,{href:"https://github.com/shekhar-patil/data_structure_and_algorithms/blob/main/data_structures/trees/general_trees/python/general_tree.py",children:"Singly linked list in Python"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var r=t(6540);const a={},s=r.createContext(a);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);