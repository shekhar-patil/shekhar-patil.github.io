"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[113],{1706:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"data-structures-and-algorithms/sorting-algorithms/quick-sort","title":"Quick Sort","description":"Sorting algorithms are one of the most fundamental topics in computer science, and Quick Sort stands out as one of the most efficient and widely used sorting algorithms in practice. In this blog, we\'ll explore how Quick Sort works, walk through an example step-by-step, and then see a complete Go implementation.","source":"@site/docs/data-structures-and-algorithms/sorting-algorithms/quick-sort.md","sourceDirName":"data-structures-and-algorithms/sorting-algorithms","slug":"/data-structures-and-algorithms/sorting-algorithms/quick-sort","permalink":"/docs/data-structures-and-algorithms/sorting-algorithms/quick-sort","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"dsaSidebar","previous":{"title":"Merge Sort","permalink":"/docs/data-structures-and-algorithms/sorting-algorithms/merge-sort"},"next":{"title":"Searching Algorithms","permalink":"/docs/category/searching-algorithms"}}');var i=r(4848),s=r(8453);const o={sidebar_position:6},l="Quick Sort",a={},h=[{value:"\ud83d\udd0e How Quick Sort Works",id:"-how-quick-sort-works",level:2},{value:"\ud83d\udcca Step-by-Step Example",id:"-step-by-step-example",level:2},{value:"Step 1: Choose Pivot",id:"step-1-choose-pivot",level:3},{value:"Step 2: Partition",id:"step-2-partition",level:3},{value:"Step 3: Recursively Sort Left and Right Subarrays",id:"step-3-recursively-sort-left-and-right-subarrays",level:3},{value:"Step 4: Repeat for Right Subarray",id:"step-4-repeat-for-right-subarray",level:3},{value:"Step 5: Continue Recursion",id:"step-5-continue-recursion",level:3},{value:"Final Sorted Array:",id:"final-sorted-array",level:3},{value:"\ud83e\uddee Complete Code in Go",id:"-complete-code-in-go",level:2},{value:"\ud83e\uddea Sample Output",id:"-sample-output",level:2},{value:"\u23f1 Time Complexity",id:"-time-complexity",level:2},{value:"\ud83d\udd25 Conclusion",id:"-conclusion",level:2},{value:"\ud83d\udcbb Complete Code Repository",id:"-complete-code-repository",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"quick-sort",children:"Quick Sort"})}),"\n",(0,i.jsxs)(n.p,{children:["Sorting algorithms are one of the most fundamental topics in computer science, and ",(0,i.jsx)(n.strong,{children:"Quick Sort"})," stands out as one of the most efficient and widely used sorting algorithms in practice. In this blog, we'll explore how Quick Sort works, walk through an example step-by-step, and then see a complete Go implementation."]}),"\n",(0,i.jsx)(n.h2,{id:"-how-quick-sort-works",children:"\ud83d\udd0e How Quick Sort Works"}),"\n",(0,i.jsxs)(n.p,{children:["Quick Sort is a ",(0,i.jsx)(n.strong,{children:"divide and conquer"})," algorithm that follows these main steps:"]}),"\n",(0,i.jsxs)(n.p,{children:["1\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"Choose a pivot"}),"\nSelect one element from the array as the pivot."]}),"\n",(0,i.jsxs)(n.p,{children:["2\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"Partition the array"}),"\nRearrange the array so that:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Elements smaller than the pivot are on the left."}),"\n",(0,i.jsx)(n.li,{children:"Elements larger than the pivot are on the right."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["3\ufe0f\u20e3 ",(0,i.jsx)(n.strong,{children:"Recursively apply Quick Sort"}),"\nApply the same process to the left and right subarrays."]}),"\n",(0,i.jsx)(n.p,{children:"This process continues until the entire array is sorted."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-step-by-step-example",children:"\ud83d\udcca Step-by-Step Example"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s say we want to sort:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[1, 5, 2, 10, 30, -1, 4]\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-1-choose-pivot",children:"Step 1: Choose Pivot"}),"\n",(0,i.jsxs)(n.p,{children:["We pick the ",(0,i.jsx)(n.strong,{children:"first element"})," as pivot:\n",(0,i.jsx)(n.code,{children:"pivot = 1"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-2-partition",children:"Step 2: Partition"}),"\n",(0,i.jsx)(n.p,{children:"We rearrange the elements so that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All elements ",(0,i.jsx)(n.code,{children:"<= 1"})," go to the left"]}),"\n",(0,i.jsxs)(n.li,{children:["All elements ",(0,i.jsx)(n.code,{children:">= 1"})," go to the right"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"While partitioning:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Compare 5 with 1 \u2192 5 is greater \u2192 stay right"}),"\n",(0,i.jsx)(n.li,{children:"Compare 2 with 1 \u2192 2 is greater \u2192 stay right"}),"\n",(0,i.jsx)(n.li,{children:"Compare 10 with 1 \u2192 greater"}),"\n",(0,i.jsx)(n.li,{children:"Compare 30 with 1 \u2192 greater"}),"\n",(0,i.jsxs)(n.li,{children:["Compare -1 with 1 \u2192 swap -1 with 5 \u2192 now array: ",(0,i.jsx)(n.code,{children:"[1, -1, 2, 10, 30, 5, 4]"})]}),"\n",(0,i.jsx)(n.li,{children:"Compare 4 with 1 \u2192 greater"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Finally, swap pivot with last smaller element (-1).\nThe array becomes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[-1, 1, 2, 10, 30, 5, 4]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now pivot ",(0,i.jsx)(n.code,{children:"1"})," is at its correct sorted position (index 1)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-3-recursively-sort-left-and-right-subarrays",children:"Step 3: Recursively Sort Left and Right Subarrays"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Left subarray: ",(0,i.jsx)(n.code,{children:"[-1]"})," (already sorted)"]}),"\n",(0,i.jsxs)(n.li,{children:["Right subarray: ",(0,i.jsx)(n.code,{children:"[2, 10, 30, 5, 4]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-4-repeat-for-right-subarray",children:"Step 4: Repeat for Right Subarray"}),"\n",(0,i.jsxs)(n.p,{children:["Take pivot: ",(0,i.jsx)(n.code,{children:"2"}),"\nPartition \u2192 already sorted \u2192 no swaps needed."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Left: empty"}),"\n",(0,i.jsxs)(n.li,{children:["Right: ",(0,i.jsx)(n.code,{children:"[10, 30, 5, 4]"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-5-continue-recursion",children:"Step 5: Continue Recursion"}),"\n",(0,i.jsxs)(n.p,{children:["Take pivot: ",(0,i.jsx)(n.code,{children:"10"}),"\nPartition:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Compare 30 \u2192 greater"}),"\n",(0,i.jsxs)(n.li,{children:["Compare 5 \u2192 swap with 30 \u2192 ",(0,i.jsx)(n.code,{children:"[5, 30, 4]"})]}),"\n",(0,i.jsxs)(n.li,{children:["Compare 4 \u2192 swap with 30 \u2192 ",(0,i.jsx)(n.code,{children:"[5, 4, 30]"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Swap pivot ",(0,i.jsx)(n.code,{children:"10"})," into correct position:\nResult: ",(0,i.jsx)(n.code,{children:"[4, 5, 10, 30]"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"final-sorted-array",children:"Final Sorted Array:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[-1, 1, 2, 4, 5, 10, 30]\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-complete-code-in-go",children:"\ud83e\uddee Complete Code in Go"}),"\n",(0,i.jsxs)(n.p,{children:["Here\u2019s the complete Go implementation of Quick Sort using ",(0,i.jsx)(n.strong,{children:"Hoare partitioning"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\n// Partition function using Hoare partitioning\nfunc Partition(arr []int, low int, high int) int {\n    i := low - 1\n    j := high + 1\n    pivot := arr[low]\n\n    for {\n        for {\n            i++\n            if arr[i] >= pivot {\n                break\n            }\n        }\n\n        for {\n            j--\n            if arr[j] <= pivot {\n                break\n            }\n        }\n\n        if i >= j {\n            return j\n        }\n\n        arr[i], arr[j] = arr[j], arr[i]\n    }\n}\n\n// Recursive QuickSort function\nfunc QuickSort(arr []int, low int, high int) {\n    if low < high {\n        pivot := Partition(arr, low, high)\n        QuickSort(arr, low, pivot-1)\n        QuickSort(arr, pivot+1, high)\n    }\n}\n\nfunc main() {\n    arr := []int{1, 5, 2, 10, 30, -1, 4}\n    n := len(arr)\n    QuickSort(arr, 0, n-1)\n    fmt.Println(arr)\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-sample-output",children:"\ud83e\uddea Sample Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[-1 1 2 4 5 10 30]\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-time-complexity",children:"\u23f1 Time Complexity"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Case"}),(0,i.jsx)(n.th,{children:"Time Complexity"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Best case"})}),(0,i.jsx)(n.td,{children:"O(n log n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Average case"})}),(0,i.jsx)(n.td,{children:"O(n log n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Worst case"})}),(0,i.jsx)(n.td,{children:"O(n\xb2)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"\u2705 In practice, Quick Sort performs very well due to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Low memory overhead (in-place)"}),"\n",(0,i.jsx)(n.li,{children:"Cache efficiency"}),"\n",(0,i.jsx)(n.li,{children:"Fast average case behavior"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-conclusion",children:"\ud83d\udd25 Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Quick Sort is fast, elegant, and widely used in many real-world systems. Its divide-and-conquer approach combined with efficient in-place partitioning makes it highly effective for large datasets."}),"\n",(0,i.jsxs)(n.p,{children:["Make sure you not only memorize the algorithm but deeply understand ",(0,i.jsx)(n.strong,{children:"how partitioning works"})," \u2014 that\u2019s the heart of Quick Sort."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-complete-code-repository",children:"\ud83d\udcbb Complete Code Repository"}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,i.jsx)(n.a,{href:"https://github.com/shekhar-patil/data_structure_and_algorithms/blob/main/sorting_algorithms/quick_sort.go",children:"Quick Sort in Go (GitHub)"})]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);