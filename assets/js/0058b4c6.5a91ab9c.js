"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"golangSidebar":[{"type":"link","label":"Go programming language documentation","href":"/docs/golang/intro","docId":"golang/intro","unlisted":false},{"type":"category","label":"Go - Basics","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Hello, World!","href":"/docs/golang/golang-basics/hello-world","docId":"golang/golang-basics/hello-world","unlisted":false},{"type":"link","label":"Variables","href":"/docs/golang/golang-basics/variables","docId":"golang/golang-basics/variables","unlisted":false},{"type":"link","label":"Interface","href":"/docs/golang/golang-basics/interface","docId":"golang/golang-basics/interface","unlisted":false},{"type":"link","label":"Generics","href":"/docs/golang/golang-basics/generics","docId":"golang/golang-basics/generics","unlisted":false}],"href":"/docs/category/go---basics"},{"type":"category","label":"Go - Concurrency","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"goroutines","href":"/docs/golang/golang-concurrency/goroutines","docId":"golang/golang-concurrency/goroutines","unlisted":false}],"href":"/docs/category/go---concurrency"},{"type":"category","label":"Go - Concurrency Patterns","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Worker Pools","href":"/docs/golang/golang-concurrency-patterns/worker-pool-pattern","docId":"golang/golang-concurrency-patterns/worker-pool-pattern","unlisted":false},{"type":"link","label":"Graceful Shutdown Pattern","href":"/docs/golang/golang-concurrency-patterns/graceful-shutdown-pattern","docId":"golang/golang-concurrency-patterns/graceful-shutdown-pattern","unlisted":false}],"href":"/docs/category/go---concurrency-patterns"}],"dsaSidebar":[{"type":"link","label":"Data Structures and Algorithms Roadmap","href":"/docs/data-structures-and-algorithms/dsa-roadmap","docId":"data-structures-and-algorithms/intro","unlisted":false},{"type":"category","label":"Data Structures","collapsible":true,"collapsed":false,"items":[{"type":"category","label":"Linked List Data Structure","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Linked List","href":"/docs/data-structures-and-algorithms/data-structures/linked-list/","docId":"data-structures-and-algorithms/data-structures/linked-list/linked-list","unlisted":false},{"type":"link","label":"Singly Linked List","href":"/docs/data-structures-and-algorithms/data-structures/linked-list/singly-linked-list","docId":"data-structures-and-algorithms/data-structures/linked-list/singly-linked-list","unlisted":false},{"type":"link","label":"Doubly Linked List","href":"/docs/data-structures-and-algorithms/data-structures/linked-list/doubly-linked-list","docId":"data-structures-and-algorithms/data-structures/linked-list/doubly-linked-list","unlisted":false},{"type":"link","label":"Circular Linked List","href":"/docs/data-structures-and-algorithms/data-structures/linked-list/circular-linked-list","docId":"data-structures-and-algorithms/data-structures/linked-list/circular-linked-list","unlisted":false}],"href":"/docs/category/linked-list-data-structure"},{"type":"category","label":"Stack Data Structure","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Stack in Golang","href":"/docs/data-structures-and-algorithms/data-structures/stack/","docId":"data-structures-and-algorithms/data-structures/stack/stack","unlisted":false}],"href":"/docs/category/stack-data-structure"},{"type":"category","label":"Tree","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"General Tree","href":"/docs/data-structures-and-algorithms/data-structures/tree/general-tree","docId":"data-structures-and-algorithms/data-structures/tree/general-tree","unlisted":false},{"type":"link","label":"Binary Search Tree","href":"/docs/data-structures-and-algorithms/data-structures/tree/binary-search-tree","docId":"data-structures-and-algorithms/data-structures/tree/binary-search-tree","unlisted":false}],"href":"/docs/category/tree"}],"href":"/docs/category/data-structures"},{"type":"category","label":"Sorting Algorithms","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Bubble Sort","href":"/docs/data-structures-and-algorithms/sorting-algorithms/bubble-sort","docId":"data-structures-and-algorithms/sorting-algorithms/bubble-sort","unlisted":false},{"type":"link","label":"Insertion Sort","href":"/docs/data-structures-and-algorithms/sorting-algorithms/insertion-sort","docId":"data-structures-and-algorithms/sorting-algorithms/insertion-sort","unlisted":false},{"type":"link","label":"Selection Sort","href":"/docs/data-structures-and-algorithms/sorting-algorithms/selection-sort","docId":"data-structures-and-algorithms/sorting-algorithms/selection-sort","unlisted":false},{"type":"link","label":"Merge Sort","href":"/docs/data-structures-and-algorithms/sorting-algorithms/merge-sort","docId":"data-structures-and-algorithms/sorting-algorithms/merge-sort","unlisted":false},{"type":"link","label":"Quick Sort","href":"/docs/data-structures-and-algorithms/sorting-algorithms/quick-sort","docId":"data-structures-and-algorithms/sorting-algorithms/quick-sort","unlisted":false}],"href":"/docs/category/sorting-algorithms"},{"type":"category","label":"Searching Algorithms","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Linear Search","href":"/docs/data-structures-and-algorithms/searching-algorithms/linear-search","docId":"data-structures-and-algorithms/searching-algorithms/linear-search","unlisted":false},{"type":"link","label":"Binary Search","href":"/docs/data-structures-and-algorithms/searching-algorithms/binary-search","docId":"data-structures-and-algorithms/searching-algorithms/binary-search","unlisted":false}],"href":"/docs/category/searching-algorithms"},{"type":"category","label":"Graph Algorithms","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Prim\u2019s Algorithm \u2014 Minimum Spanning Tree (MST)","href":"/docs/data-structures-and-algorithms/graph-algorithms/prims-algorithm","docId":"data-structures-and-algorithms/graph-algorithms/prims-algorithm","unlisted":false},{"type":"link","label":"Dijkstra\'s Algorithm","href":"/docs/data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm","docId":"data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm","unlisted":false}],"href":"/docs/category/graph-algorithms"},{"type":"category","label":"Dynamic Programming","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Kadane\u2019s Algorithm","href":"/docs/data-structures-and-algorithms/dynamic-programming/kandanes-algorithm","docId":"data-structures-and-algorithms/dynamic-programming/kandanes-algorithm","unlisted":false}],"href":"/docs/category/dynamic-programming"}],"leetcodeSidebar":[{"type":"link","label":"LeetCode Solutions","href":"/docs/leetcode/intro","docId":"leetcode/intro","unlisted":false}],"aboutSidebar":[{"type":"link","label":"About Me","href":"/docs/about/","docId":"about/index","unlisted":false}]},"docs":{"about/index":{"id":"about/index","title":"About Me","description":"Based in Pune, India, I\'m a Software Engineer with a Computer Engineering background. My professional journey has been shaped by working with modern technologies like Ruby, Rails, Golang, Docker, Kubernetes, and Google Cloud Platform. I\'m passionate about open-source development and have made contributions to notable projects including Rails, Rubocop, and Swagger UI Engine. I\'m also proud to be a maintainer of the pdf_scanner Ruby gem.","sidebar":"aboutSidebar"},"data-structures-and-algorithms/data-structures/linked-list/circular-linked-list":{"id":"data-structures-and-algorithms/data-structures/linked-list/circular-linked-list","title":"Circular Linked List","description":"A Circular Linked List is a variation of the linked list where the last node\'s pointer points back to the first node, creating a circular structure. This unique arrangement allows continuous traversal of the list, either in one direction (for singly linked lists) or in both directions (for doubly linked lists).","sidebar":"dsaSidebar"},"data-structures-and-algorithms/data-structures/linked-list/doubly-linked-list":{"id":"data-structures-and-algorithms/data-structures/linked-list/doubly-linked-list","title":"Doubly Linked List","description":"A Doubly Linked List is a more sophisticated data structure compared to a Singly Linked List. In a Doubly Linked List, each node contains three fields: data, a pointer to the next node, and a pointer to the previous node. This structure allows for traversal in both directions\u2014from the head (the first node) to the tail (the last node), and vice versa.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/data-structures/linked-list/linked-list":{"id":"data-structures-and-algorithms/data-structures/linked-list/linked-list","title":"Linked List","description":"A linked list is a fundamental linear data structure composed of a series of interconnected nodes. Each node contains two main elements: data and a reference (or pointer) to the next node in the sequence. The first node in the list is known as the Head, while the last node is referred to as the Tail. In most linked lists, the Tail points to NULL, indicating the end of the list.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/data-structures/linked-list/singly-linked-list":{"id":"data-structures-and-algorithms/data-structures/linked-list/singly-linked-list","title":"Singly Linked List","description":"A Singly Linked List is a fundamental data structure where each node contains two fields: data and a pointer to the next node in the sequence. This structure allows for traversal in a single direction\u2014from the head (the first node) to the tail (the last node)\u2014but does not permit backward traversal.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/data-structures/stack/stack":{"id":"data-structures-and-algorithms/data-structures/stack/stack","title":"Stack in Golang","description":"A Stack is a Last In, First Out (LIFO) data structure, meaning that the most recently added element is the first one to be removed.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/data-structures/tree/binary-search-tree":{"id":"data-structures-and-algorithms/data-structures/tree/binary-search-tree","title":"Binary Search Tree","description":"","sidebar":"dsaSidebar"},"data-structures-and-algorithms/data-structures/tree/general-tree":{"id":"data-structures-and-algorithms/data-structures/tree/general-tree","title":"General Tree","description":"Feel free to follow my work on GitHub: Singly linked list in Python.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/dynamic-programming/kandanes-algorithm":{"id":"data-structures-and-algorithms/dynamic-programming/kandanes-algorithm","title":"Kadane\u2019s Algorithm","description":"---","sidebar":"dsaSidebar"},"data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm":{"id":"data-structures-and-algorithms/graph-algorithms/dijkstra-algorithm","title":"Dijkstra\'s Algorithm","description":"Feel free to follow my work on GitHub: Dijkstra Algorithm in Go.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/graph-algorithms/prims-algorithm":{"id":"data-structures-and-algorithms/graph-algorithms/prims-algorithm","title":"Prim\u2019s Algorithm \u2014 Minimum Spanning Tree (MST)","description":"In this post, we will explore Prim\u2019s Algorithm, a greedy approach used to find the Minimum Spanning Tree (MST) of a weighted, undirected graph. We\u2019ll also implement the algorithm in Go and walk through a visual example to solidify your understanding.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/intro":{"id":"data-structures-and-algorithms/intro","title":"Data Structures and Algorithms Roadmap","description":"Learn Data Structures and Algorithms with Shekhar Patil.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/searching-algorithms/binary-search":{"id":"data-structures-and-algorithms/searching-algorithms/binary-search","title":"Binary Search","description":"Have you ever looked for a word in a dictionary? You don\u2019t start from the first page \u2014 you flip somewhere in the middle, check, and based on what you see, jump left or right. That\u2019s exactly how Binary Search works.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/searching-algorithms/linear-search":{"id":"data-structures-and-algorithms/searching-algorithms/linear-search","title":"Linear Search","description":"Linear Search is one of the simplest and most intuitive algorithms used to find an element in a list or array. It checks each element sequentially until the desired value is found or the list ends.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/sorting-algorithms/bubble-sort":{"id":"data-structures-and-algorithms/sorting-algorithms/bubble-sort","title":"Bubble Sort","description":"Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process continues until the array is sorted.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/sorting-algorithms/insertion-sort":{"id":"data-structures-and-algorithms/sorting-algorithms/insertion-sort","title":"Insertion Sort","description":"Insertion Sort is a simple and intuitive comparison-based sorting algorithm. It builds the final sorted array one element at a time, by repeatedly picking the next element and inserting it into its correct position among the previously sorted elements.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/sorting-algorithms/merge-sort":{"id":"data-structures-and-algorithms/sorting-algorithms/merge-sort","title":"Merge Sort","description":"Merge Sort is a highly efficient, comparison-based, divide-and-conquer sorting algorithm. It divides the array into halves, recursively sorts each half, and then merges the sorted halves back together.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/sorting-algorithms/quick-sort":{"id":"data-structures-and-algorithms/sorting-algorithms/quick-sort","title":"Quick Sort","description":"Sorting algorithms are one of the most fundamental topics in computer science, and Quick Sort stands out as one of the most efficient and widely used sorting algorithms in practice. In this blog, we\'ll explore how Quick Sort works, walk through an example step-by-step, and then see a complete Go implementation.","sidebar":"dsaSidebar"},"data-structures-and-algorithms/sorting-algorithms/selection-sort":{"id":"data-structures-and-algorithms/sorting-algorithms/selection-sort","title":"Selection Sort","description":"Selection Sort is a simple comparison-based sorting algorithm. It divides the input list into two parts: the sublist of items already sorted, which is built up from left to right, and the sublist of items remaining to be sorted.","sidebar":"dsaSidebar"},"docker/docker-basics/congratulations":{"id":"docker/docker-basics/congratulations","title":"Congratulations!","description":"You have just learned the basics of Docusaurus and made some changes to the initial template."},"docker/docker-basics/create-a-blog-post":{"id":"docker/docker-basics/create-a-blog-post","title":"Create a Blog Post","description":"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed..."},"docker/docker-basics/create-a-document":{"id":"docker/docker-basics/create-a-document","title":"Create a Document","description":"Documents are groups of pages connected through:"},"docker/docker-basics/create-a-page":{"id":"docker/docker-basics/create-a-page","title":"Create a Page","description":"Add Markdown or React files to src/pages to create a standalone page:"},"docker/docker-basics/deploy-your-site":{"id":"docker/docker-basics/deploy-your-site","title":"Deploy your site","description":"Docusaurus is a static-site-generator (also called Jamstack)."},"docker/docker-basics/markdown-features":{"id":"docker/docker-basics/markdown-features","title":"Markdown Features","description":"Docusaurus supports Markdown and a few additional features."},"docker/docker-extras/manage-docs-versions":{"id":"docker/docker-extras/manage-docs-versions","title":"Manage Docs Versions","description":"Docusaurus can manage multiple versions of your docs."},"docker/docker-extras/translate-your-site":{"id":"docker/docker-extras/translate-your-site","title":"Translate your site","description":"Let\'s translate docs/intro.md to French."},"docker/intro":{"id":"docker/intro","title":"Tutorial Intro","description":"Let\'s discover Docusaurus in less than 5 minutes."},"golang/golang-basics/generics":{"id":"golang/golang-basics/generics","title":"Generics","description":"Introduction","sidebar":"golangSidebar"},"golang/golang-basics/hello-world":{"id":"golang/golang-basics/hello-world","title":"Hello, World!","description":"Writing the \\"Hello, World!\\" Program","sidebar":"golangSidebar"},"golang/golang-basics/interface":{"id":"golang/golang-basics/interface","title":"Interface","description":"Code implementation","sidebar":"golangSidebar"},"golang/golang-basics/variables":{"id":"golang/golang-basics/variables","title":"Variables","description":"Data types","sidebar":"golangSidebar"},"golang/golang-concurrency-patterns/graceful-shutdown-pattern":{"id":"golang/golang-concurrency-patterns/graceful-shutdown-pattern","title":"Graceful Shutdown Pattern","description":"Graceful shutdown is an important aspect of writing robust and reliable applications. In Go, this can be achieved using goroutines and channels. In this post, we will explore how to implement a graceful shutdown pattern using these constructs.","sidebar":"golangSidebar"},"golang/golang-concurrency-patterns/worker-pool-pattern":{"id":"golang/golang-concurrency-patterns/worker-pool-pattern","title":"Worker Pools","description":"What is worker pool pattern?","sidebar":"golangSidebar"},"golang/golang-concurrency/goroutines":{"id":"golang/golang-concurrency/goroutines","title":"goroutines","description":"Goroutines","sidebar":"golangSidebar"},"golang/intro":{"id":"golang/intro","title":"Go programming language documentation","description":"Golang, is an open-source programming language designed for simplicity, reliability, and efficiency. It was created by Robert Griesemer, Rob Pike, and Ken Thompson at Google and first released in 2009","sidebar":"golangSidebar"},"leetcode/intro":{"id":"leetcode/intro","title":"LeetCode Solutions","description":"LeetCode Problem Solutions","sidebar":"leetcodeSidebar"}}}}')}}]);