"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[68],{3596:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/circular-linked-list-8667fe948f18bdf3de74d22aae109c8e.jpg"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},8960:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"data-structures-and-algorithms/data-structures/linked-list/circular-linked-list","title":"Circular Linked List","description":"A Circular Linked List is a variation of the linked list where the last node\'s pointer points back to the first node, creating a circular structure. This unique arrangement allows continuous traversal of the list, either in one direction (for singly linked lists) or in both directions (for doubly linked lists).","source":"@site/docs/data-structures-and-algorithms/data-structures/linked-list/circular-linked-list.md","sourceDirName":"data-structures-and-algorithms/data-structures/linked-list","slug":"/data-structures-and-algorithms/data-structures/linked-list/circular-linked-list","permalink":"/docs/data-structures-and-algorithms/data-structures/linked-list/circular-linked-list","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"dsaSidebar","previous":{"title":"Doubly Linked List","permalink":"/docs/data-structures-and-algorithms/data-structures/linked-list/doubly-linked-list"},"next":{"title":"Stack Data Structure","permalink":"/docs/category/stack-data-structure"}}');var r=t(4848),s=t(8453);const l={sidebar_position:4},a="Circular Linked List",d={},o=[{value:"Types of Circular Linked Lists",id:"types-of-circular-linked-lists",level:3},{value:"Structure of a Circular Linked List",id:"structure-of-a-circular-linked-list",level:3},{value:"Basic Operations on a Circular Linked List",id:"basic-operations-on-a-circular-linked-list",level:3},{value:"Circular Singly Linked List Implementation",id:"circular-singly-linked-list-implementation",level:3},{value:"Circular Doubly Linked List Implementation",id:"circular-doubly-linked-list-implementation",level:3},{value:"Key Points to Remember",id:"key-points-to-remember",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"circular-linked-list",children:"Circular Linked List"})}),"\n",(0,r.jsx)(n.p,{children:"A Circular Linked List is a variation of the linked list where the last node's pointer points back to the first node, creating a circular structure. This unique arrangement allows continuous traversal of the list, either in one direction (for singly linked lists) or in both directions (for doubly linked lists)."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Circular linked list",src:t(3596).A+"",width:"766",height:"171"})}),"\n",(0,r.jsx)(n.h3,{id:"types-of-circular-linked-lists",children:"Types of Circular Linked Lists"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Circular Singly Linked List"}),": Each node contains data and a pointer to the next node. The last node\u2019s pointer points back to the head of the list."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Circular Doubly Linked List"}),": Each node has three fields: data, a pointer to the next node, and a pointer to the previous node. The last node\u2019s ",(0,r.jsx)(n.code,{children:"next"})," pointer points to the head, and the head\u2019s ",(0,r.jsx)(n.code,{children:"prev"})," pointer points to the last node."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"structure-of-a-circular-linked-list",children:"Structure of a Circular Linked List"}),"\n",(0,r.jsx)(n.p,{children:"In Go, a Circular Linked List can be implemented using structs to represent the nodes and the list itself."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Node struct"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Node"})," struct holds the data and pointers to the next (and previous) nodes in the list."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Node struct {\n    data int\n    next *Node\n    prev *Node  // Used only for circular doubly linked list\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CircularLinkedList struct"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CircularLinkedList"})," struct manages the list and typically contains a reference to the head node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type CircularLinkedList struct {\n    head *Node\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"basic-operations-on-a-circular-linked-list",children:"Basic Operations on a Circular Linked List"}),"\n",(0,r.jsx)(n.p,{children:"To work with a Circular Linked List, essential operations such as inserting a node and printing the list's contents are needed. Below is the outline for these operations in Go."}),"\n",(0,r.jsx)(n.h3,{id:"circular-singly-linked-list-implementation",children:"Circular Singly Linked List Implementation"}),"\n",(0,r.jsx)(n.p,{children:"Let's first explore the implementation of a Circular Singly Linked List in Go."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\n// Node represents an element in the circular singly linked list\ntype Node struct {\n    data int\n    next *Node\n}\n\n// CircularLinkedList represents the circular singly linked list\ntype CircularLinkedList struct {\n    head *Node\n}\n\n// Insert a new node at the end of the list\nfunc (list *CircularLinkedList) insertNode(data int) {\n    newNode := &Node{data: data}\n\n    if list.head == nil {\n        list.head = newNode\n        newNode.next = list.head\n    } else {\n        current := list.head\n        for current.next != list.head {\n            current = current.next\n        }\n        current.next = newNode\n        newNode.next = list.head\n    }\n}\n\n// Print all nodes in the list\nfunc (list *CircularLinkedList) printList() {\n    if list.head == nil {\n        fmt.Println("List is empty")\n        return\n    }\n\n    current := list.head\n    for {\n        fmt.Print(current.data, " ")\n        current = current.next\n        if current == list.head {\n            break\n        }\n    }\n    fmt.Println()\n}\n\nfunc main() {\n    list := CircularLinkedList{}\n\n    list.insertNode(10)\n    list.insertNode(20)\n    list.insertNode(30)\n    list.printList() // Output: 10 20 30\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"circular-doubly-linked-list-implementation",children:"Circular Doubly Linked List Implementation"}),"\n",(0,r.jsx)(n.p,{children:"Next, let\u2019s implement a Circular Doubly Linked List in Go."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\n// Node represents an element in the circular doubly linked list\ntype Node struct {\n    data int\n    next *Node\n    prev *Node\n}\n\n// CircularDoublyLinkedList represents the circular doubly linked list\ntype CircularDoublyLinkedList struct {\n    head *Node\n}\n\n// Insert a new node at the end of the list\nfunc (list *CircularDoublyLinkedList) insertNode(data int) {\n    newNode := &Node{data: data}\n\n    if list.head == nil {\n        list.head = newNode\n        newNode.next = list.head\n        newNode.prev = list.head\n    } else {\n        tail := list.head.prev\n        tail.next = newNode\n        newNode.prev = tail\n        newNode.next = list.head\n        list.head.prev = newNode\n    }\n}\n\n// Print all nodes in the list\nfunc (list *CircularDoublyLinkedList) printList() {\n    if list.head == nil {\n        fmt.Println("List is empty")\n        return\n    }\n\n    current := list.head\n    for {\n        fmt.Print(current.data, " ")\n        current = current.next\n        if current == list.head {\n            break\n        }\n    }\n    fmt.Println()\n}\n\nfunc main() {\n    list := CircularDoublyLinkedList{}\n\n    list.insertNode(10)\n    list.insertNode(20)\n    list.insertNode(30)\n    list.printList() // Output: 10 20 30\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"key-points-to-remember",children:"Key Points to Remember"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In a ",(0,r.jsx)(n.strong,{children:"Circular Singly Linked List"}),", the ",(0,r.jsx)(n.code,{children:"next"})," pointer of the last node points to the ",(0,r.jsx)(n.code,{children:"head"}),", creating a circular connection."]}),"\n",(0,r.jsxs)(n.li,{children:["In a ",(0,r.jsx)(n.strong,{children:"Circular Doubly Linked List"}),", both the ",(0,r.jsx)(n.code,{children:"next"})," pointer of the last node and the ",(0,r.jsx)(n.code,{children:"prev"})," pointer of the ",(0,r.jsx)(n.code,{children:"head"})," connect back to each other, enabling traversal in both directions."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Circular Linked Lists are particularly useful in scenarios where you need to loop through the data structure continuously, such as in round-robin scheduling or managing a playlist."}),"\n",(0,r.jsxs)(n.p,{children:["For more detailed code examples, check out my GitHub repository: ",(0,r.jsx)(n.a,{href:"https://github.com/shekhar-patil/data_structure_and_algorithms/blob/main/data_structures/linked_list/golang/circular_linked_list.go",children:"Circular Linked List in Go"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);