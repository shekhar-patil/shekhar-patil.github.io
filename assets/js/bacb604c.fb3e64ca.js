"use strict";(self.webpackChunkshekhar_patil_github_io=self.webpackChunkshekhar_patil_github_io||[]).push([[8790],{8345:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"golang/golang-basics/variables","title":"Variables","description":"Data types","source":"@site/docs/golang/golang-basics/variables.md","sourceDirName":"golang/golang-basics","slug":"/golang/golang-basics/variables","permalink":"/docs/golang/golang-basics/variables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"golangSidebar","previous":{"title":"Hello, World!","permalink":"/docs/golang/golang-basics/hello-world"},"next":{"title":"Interface","permalink":"/docs/golang/golang-basics/interface"}}');var r=s(4848),a=s(8453);const t={sidebar_position:2},l="Variables",c={},o=[{value:"Data types",id:"data-types",level:2},{value:"1. <strong>Basic Types</strong>",id:"1-basic-types",level:3},{value:"2. <strong>Aggregate Types</strong>",id:"2-aggregate-types",level:3},{value:"3. <strong>Reference Types</strong>",id:"3-reference-types",level:3},{value:"4. <strong>Interface Types</strong>",id:"4-interface-types",level:3},{value:"Default Values",id:"default-values",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"variables",children:"Variables"})}),"\n",(0,r.jsx)(n.h2,{id:"data-types",children:"Data types"}),"\n",(0,r.jsx)(n.p,{children:"In Go, types are mainly divided into the following four categories:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Basic Types"}),": Numbers, strings, and booleans come under this category."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Aggregate Types"}),": Arrays and structs come under this category."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reference Types"}),": Pointers, slices, maps, functions, and channels come under this category."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interface Types"}),": This category includes interfaces, which define a set of method signatures and are implemented by types that provide those methods."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"1-basic-types",children:["1. ",(0,r.jsx)(n.strong,{children:"Basic Types"})]}),"\n",(0,r.jsx)(n.p,{children:"Basic types are the most fundamental data types in Go. They represent simple values such as numbers, strings, and booleans."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Numbers"}),": Go supports various numeric types, including integers, floating-point numbers, and complex numbers."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integers"}),": ",(0,r.jsx)(n.code,{children:"int"}),", ",(0,r.jsx)(n.code,{children:"int8"}),", ",(0,r.jsx)(n.code,{children:"int16"}),", ",(0,r.jsx)(n.code,{children:"int32"}),", ",(0,r.jsx)(n.code,{children:"int64"}),", ",(0,r.jsx)(n.code,{children:"uint"}),", ",(0,r.jsx)(n.code,{children:"uint8"}),", ",(0,r.jsx)(n.code,{children:"uint16"}),", ",(0,r.jsx)(n.code,{children:"uint32"}),", ",(0,r.jsx)(n.code,{children:"uint64"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Floating-point numbers"}),": ",(0,r.jsx)(n.code,{children:"float32"}),", ",(0,r.jsx)(n.code,{children:"float64"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complex numbers"}),": ",(0,r.jsx)(n.code,{children:"complex64"}),", ",(0,r.jsx)(n.code,{children:"complex128"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var age int = 30\nvar temperature float64 = 36.6\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Strings"}),": A sequence of characters represented by the ",(0,r.jsx)(n.code,{children:"string"})," type."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var name string = "Shekhar"\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Booleans"}),": A type that can hold one of two values: ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var isActive bool = true\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-aggregate-types",children:["2. ",(0,r.jsx)(n.strong,{children:"Aggregate Types"})]}),"\n",(0,r.jsx)(n.p,{children:"Aggregate types are types that can hold multiple values. They include arrays and structs."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Array"}),": An array is a fixed-size sequence of elements of a single type. The size of the array is part of its type."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var numbers [5]int = [5]int{1, 2, 3, 4, 5}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Struct"}),": A struct is a composite type that groups together variables under a single name. Each variable within a struct is called a field."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Person struct {\n    Name string\n    Age  int\n}\n\nvar person Person = Person{Name: "Shekhar", Age: 30}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-reference-types",children:["3. ",(0,r.jsx)(n.strong,{children:"Reference Types"})]}),"\n",(0,r.jsx)(n.p,{children:"Reference types hold references to memory locations where the actual data is stored. They include pointers, slices, maps, functions, and channels."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pointers"}),": A pointer is a variable that stores the memory address of another variable. They are declared using the ",(0,r.jsx)(n.code,{children:"*"})," operator."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var x int = 10\nvar p *int = &x  // p is a pointer to x\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Slices"}),": A slice is a dynamically-sized, flexible view into the elements of an array. Unlike arrays, slices can grow and shrink."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var nums []int = []int{1, 2, 3, 4, 5}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Maps"}),": A map is a collection of key-value pairs, where each key is unique within the map."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var m map[string]int = map[string]int{"one": 1, "two": 2}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Functions"}),": Functions are first-class citizens in Go, meaning they can be assigned to variables, passed as arguments, and returned from other functions."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var f func(int) int = func(x int) int { return x * x }\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Channels"}),": Channels are used for communication between goroutines, enabling safe concurrency. They allow you to send and receive values between different goroutines."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var ch chan int = make(chan int)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-interface-types",children:["4. ",(0,r.jsx)(n.strong,{children:"Interface Types"})]}),"\n",(0,r.jsx)(n.p,{children:"Interfaces define a set of method signatures but do not provide implementations. Types that implement these methods satisfy the interface and can be used wherever the interface is expected."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Interface"}),": An interface type specifies a set of method signatures. A type implements an interface by implementing the methods. Interfaces are a key feature in Go's type system and support polymorphism."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Describer interface {\n    Describe() string\n}\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p Person) Describe() string {\n    return fmt.Sprintf("Name: %s, Age: %d", p.Name, p.Age)\n}\n\nvar d Describer = Person{Name: "Shekhar", Age: 18}\nfmt.Println(d.Describe())  // Outputs: Name: Shekhar, Age: 18\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"Person"})," type implements the ",(0,r.jsx)(n.code,{children:"Describer"})," interface because it has a method ",(0,r.jsx)(n.code,{children:"Describe"})," with the same signature as specified in the interface. This allows instances of ",(0,r.jsx)(n.code,{children:"Person"})," to be used wherever a ",(0,r.jsx)(n.code,{children:"Describer"})," is expected."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," We will go deeper into interfaces in coming tutorials."]}),"\n",(0,r.jsx)(n.h2,{id:"default-values",children:"Default Values"}),"\n",(0,r.jsx)(n.p,{children:'In Go, when a variable is declared but not initialized, it is assigned a default value, known as the "zero value." The zero value is type-specific and represents the default initialization for that type. Here\'s a list of default values for the various data types in Go:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"int, uint:"})," ",(0,r.jsx)(n.code,{children:"0"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"float32, float64:"})," ",(0,r.jsx)(n.code,{children:"0.0"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"complex64, complex128:"})," ",(0,r.jsx)(n.code,{children:"0 + 0i"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"bool:"})," ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"string:"})," ",(0,r.jsx)(n.code,{children:'""'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"pointer, slice, map, chan, func, interface:"})," ",(0,r.jsx)(n.code,{children:"nil"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var x int        // x is 0\nvar pi float64   // pi is 0.0\nvar c complex128 // c is 0 + 0i\nvar isActive bool // isActive is false\nvar name string  // name is ""\nvar p *int       // p is nil\n'})}),"\n",(0,r.jsx)(n.p,{children:"These zero values ensure that variables have a well-defined value when they are declared but not explicitly initialized."}),"\n",(0,r.jsx)(n.p,{children:"We will cover many topics in coming tutorials."}),"\n",(0,r.jsx)(n.p,{children:"Happy coding!"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const r={},a=i.createContext(r);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);